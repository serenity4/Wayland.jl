var documenterSearchIndex = {"docs":
[{"location":"reference/api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"reference/api/#Wayland-C-bindings","page":"API","title":"Wayland C bindings","text":"","category":"section"},{"location":"reference/api/","page":"API","title":"API","text":"Modules = [LibWayland]","category":"page"},{"location":"reference/api/#Wayland.LibWayland.wl_argument","page":"API","title":"Wayland.LibWayland.wl_argument","text":"wl_argument\n\nProtocol message argument data types\n\nThis union represents all of the argument types in the Wayland protocol wire format. The protocol implementation uses wl_argument within its marshalling machinery for dispatching messages between a client and a compositor.\n\nSee also\n\nwl_message, wl_interface, <a href=\"https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-wire-Format\">Wire Format</a>\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_array","page":"API","title":"Wayland.LibWayland.wl_array","text":"wl_array\n\nwl_array\n\nDynamic array\n\nA wl_array is a dynamic array that can only grow until released. It is intended for relatively small allocations whose size is variable or not known in advance. While construction of a wl_array does not require all elements to be of the same size, wl_array_for_each() does require all elements to have the same type and size.\n\nField Note\nsize Array size\nalloc Allocated space\ndata Array data\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer","page":"API","title":"Wayland.LibWayland.wl_buffer","text":"page_wayland The wayland protocol\n\npage_ifaces_wayland Interfaces\n\n\n\npage_iface_wl_display - core global object\n\n\n\npage_iface_wl_registry - global registry object\n\n\n\npage_iface_wl_callback - callback object\n\n\n\npage_iface_wl_compositor - the compositor singleton\n\n\n\npage_iface_wl_shm_pool - a shared memory pool\n\n\n\npage_iface_wl_shm - shared memory support\n\n\n\npage_iface_wl_buffer - content for a wl_surface\n\n\n\npage_iface_wl_data_offer - offer to transfer data\n\n\n\npage_iface_wl_data_source - offer to transfer data\n\n\n\npage_iface_wl_data_device - data transfer device\n\n\n\npage_iface_wl_data_device_manager - data transfer interface\n\n\n\npage_iface_wl_shell - create desktop-style surfaces\n\n\n\npage_iface_wl_shell_surface - desktop-style metadata interface\n\n\n\npage_iface_wl_surface - an onscreen surface\n\n\n\npage_iface_wl_seat - group of input devices\n\n\n\npage_iface_wl_pointer - pointer input device\n\n\n\npage_iface_wl_keyboard - keyboard input device\n\n\n\npage_iface_wl_touch - touchscreen input device\n\n\n\npage_iface_wl_output - compositor output region\n\n\n\npage_iface_wl_region - region interface\n\n\n\npage_iface_wl_subcompositor - sub-surface compositing\n\n\n\npage_iface_wl_subsurface - sub-surface interface to a wl_surface\n\npage_copyright_wayland Copyright\n\n<pre>\n\nCopyright © 2008-2011 Kristian Høgsberg Copyright © 2010-2011 Intel Corporation Copyright © 2012-2013 Collabora, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </pre>\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_interface","page":"API","title":"Wayland.LibWayland.wl_buffer_interface","text":"wl_buffer_interface\n\niface_wl_buffer\n\nwl_buffer_interface\n\nField Note\ndestroy destroy a buffer  Destroy a buffer. If and how you need to release the backing storage is defined by the buffer factory interface.  For possible side-effects to a surface, see wl_surface.attach.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_listener","page":"API","title":"Wayland.LibWayland.wl_buffer_listener","text":"wl_buffer_listener\n\niface_wl_buffer\n\nwl_buffer_listener\n\nField Note\nrelease compositor releases buffer  Sent when this wl_buffer is no longer used by the compositor. The client is now free to reuse or destroy this buffer and its backing storage.  If a client receives a release event before the frame callback requested in the same wl_surface.commit that attaches this wl_buffer to a surface, then the client is immediately free to reuse the buffer and its backing storage, and does not need a second buffer for the next surface content update. Typically this is possible, when the compositor maintains a copy of the wl_surface contents, e.g. as a GL texture. This is an important optimization for GL(ES) compositors with wl_shm clients.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_listener","page":"API","title":"Wayland.LibWayland.wl_callback_listener","text":"wl_callback_listener\n\niface_wl_callback\n\nwl_callback_listener\n\nField Note\ndone done event  Notify the client when the related request is done.  ### Parameters * callback_data: request-specific data for the callback\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_interface","page":"API","title":"Wayland.LibWayland.wl_compositor_interface","text":"wl_compositor_interface\n\niface_wl_compositor\n\nwl_compositor_interface\n\nField Note\ncreate_surface create new surface  Ask the compositor to create a new surface.  ### Parameters * id: the new surface\ncreate_region create new region  Ask the compositor to create a new region.  ### Parameters * id: the new region\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_error","page":"API","title":"Wayland.LibWayland.wl_data_device_error","text":"wl_data_device_error\n\nEnumerator Note\nWL_DATA_DEVICE_ERROR_ROLE given wl_surface has another role\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_interface","page":"API","title":"Wayland.LibWayland.wl_data_device_interface","text":"wl_data_device_interface\n\niface_wl_data_device\n\nwl_data_device_interface\n\nField Note\nstart_drag start drag-and-drop operation  This request asks the compositor to start a drag-and-drop operation on behalf of the client.  The source argument is the data source that provides the data for the eventual data transfer. If source is NULL, enter, leave and motion events are sent only to the client that initiated the drag and the client is expected to handle the data passing internally. If source is destroyed, the drag-and-drop session will be cancelled.  The origin surface is the surface where the drag originates and the client must have an active implicit grab that matches the serial.  The icon surface is an optional (can be NULL) surface that provides an icon to be moved around with the cursor. Initially, the top-left corner of the icon surface is placed at the cursor hotspot, but subsequent wl_surface.attach request can move the relative position. Attach requests must be confirmed with wl_surface.commit as usual. The icon surface is given the role of a drag-and-drop icon. If the icon surface already has another role, it raises a protocol error.  The current and pending input regions of the icon wl_surface are cleared, and wl_surface.set_input_region is ignored until the wl_surface is no longer used as the icon surface. When the use as an icon ends, the current and pending input regions become undefined, and the wl_surface is unmapped.  ### Parameters * source: data source for the eventual transfer * origin: surface where the drag originates * icon: drag-and-drop icon surface * serial: serial number of the implicit grab on the origin\nset_selection copy data to the selection  This request asks the compositor to set the selection to the data from the source on behalf of the client.  To unset the selection, set the source to NULL.  ### Parameters * source: data source for the selection * serial: serial number of the event that triggered this request\nrelease destroy data device  This request destroys the data device.  \\since 2\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_listener","page":"API","title":"Wayland.LibWayland.wl_data_device_listener","text":"wl_data_device_listener\n\niface_wl_data_device\n\nwl_data_device_listener\n\nField Note\ndata_offer introduce a new wl_data_offer  The data_offer event introduces a new wl_data_offer object, which will subsequently be used in either the data_device.enter event (for drag-and-drop) or the data_device.selection event (for selections). Immediately following the data_device_data_offer event, the new data_offer object will send out data_offer.offer events to describe the mime types it offers.  ### Parameters * id: the new data_offer object\nenter initiate drag-and-drop session  This event is sent when an active drag-and-drop pointer enters a surface owned by the client. The position of the pointer at enter time is provided by the x and y arguments, in surface-local coordinates.  ### Parameters * serial: serial number of the enter event * surface: client surface entered * x: surface-local x coordinate * y: surface-local y coordinate * id: source data_offer object\nleave end drag-and-drop session  This event is sent when the drag-and-drop pointer leaves the surface and the session ends. The client must destroy the wl_data_offer introduced at enter time at this point.\nmotion drag-and-drop session motion  This event is sent when the drag-and-drop pointer moves within the currently focused surface. The new position of the pointer is provided by the x and y arguments, in surface-local coordinates.  ### Parameters * time: timestamp with millisecond granularity * x: surface-local x coordinate * y: surface-local y coordinate\ndrop end drag-and-drop session successfully  The event is sent when a drag-and-drop operation is ended because the implicit grab is removed.  The drag-and-drop destination is expected to honor the last action received through wl_data_offer.action, if the resulting action is \"copy\" or \"move\", the destination can still perform wl_data_offer.receive requests, and is expected to end all transfers with a wl_data_offer.finish request.  If the resulting action is \"ask\", the action will not be considered final. The drag-and-drop destination is expected to perform one last wl_data_offer.set_actions request, or wl_data_offer.destroy in order to cancel the operation.\nselection advertise new selection  The selection event is sent out to notify the client of a new wl_data_offer for the selection for this device. The data_device.data_offer and the data_offer.offer events are sent out immediately before this event to introduce the data offer object. The selection event is sent to a client immediately before receiving keyboard focus and when a new selection is set while the client has keyboard focus. The data_offer is valid until a new data_offer or NULL is received or until the client loses keyboard focus. The client must destroy the previous selection data_offer, if any, upon receiving this event.  ### Parameters * id: selection data_offer object\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_dnd_action","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_dnd_action","text":"wl_data_device_manager_dnd_action\n\niface_wl_data_device_manager\n\ndrag and drop actions\n\nThis is a bitmask of the available/preferred actions in a drag-and-drop operation.\n\nIn the compositor, the selected action is a result of matching the actions offered by the source and destination sides. \"action\" events with a \"none\" action will be sent to both source and destination if there is no match. All further checks will effectively happen on (source actions ∩ destination actions).\n\nIn addition, compositors may also pick different actions in reaction to key modifiers being pressed. One common design that is used in major toolkits (and the behavior recommended for compositors) is:\n\nIf no modifiers are pressed, the first match (in bit order) will be used. - Pressing Shift selects \"move\", if enabled in the mask. - Pressing Control selects \"copy\", if enabled in the mask.\n\nBehavior beyond that is considered implementation-dependent. Compositors may for example bind other modifiers (like Alt/Meta) or drags initiated with other buttons than BTN_LEFT to specific actions (e.g. \"ask\").\n\nEnumerator Note\nWL_DATA_DEVICE_MANAGER_DND_ACTION_NONE no action\nWL_DATA_DEVICE_MANAGER_DND_ACTION_COPY copy action\nWL_DATA_DEVICE_MANAGER_DND_ACTION_MOVE move action\nWL_DATA_DEVICE_MANAGER_DND_ACTION_ASK ask action\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_interface","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_interface","text":"wl_data_device_manager_interface\n\niface_wl_data_device_manager\n\nwl_data_device_manager_interface\n\nField Note\ncreate_data_source create a new data source  Create a new data source.  ### Parameters * id: data source to create\nget_data_device create a new data device  Create a new data device for a given seat.  ### Parameters * id: data device to create * seat: seat associated with the data device\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_error","page":"API","title":"Wayland.LibWayland.wl_data_offer_error","text":"wl_data_offer_error\n\nEnumerator Note\nWL_DATA_OFFER_ERROR_INVALID_FINISH finish request was called untimely\nWL_DATA_OFFER_ERROR_INVALID_ACTION_MASK action mask contains invalid values\nWL_DATA_OFFER_ERROR_INVALID_ACTION action argument has an invalid value\nWL_DATA_OFFER_ERROR_INVALID_OFFER offer doesn't accept this request\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_interface","page":"API","title":"Wayland.LibWayland.wl_data_offer_interface","text":"wl_data_offer_interface\n\niface_wl_data_offer\n\nwl_data_offer_interface\n\nField Note\naccept accept one of the offered mime types  Indicate that the client can accept the given mime type, or NULL for not accepted.  For objects of version 2 or older, this request is used by the client to give feedback whether the client can receive the given mime type, or NULL if none is accepted; the feedback does not determine whether the drag-and-drop operation succeeds or not.  For objects of version 3 or newer, this request determines the final result of the drag-and-drop operation. If the end result is that no mime types were accepted, the drag-and-drop operation will be cancelled and the corresponding drag source will receive wl_data_source.cancelled. Clients may still use this event in conjunction with wl_data_source.action for feedback.  ### Parameters * serial: serial number of the accept request * mime_type: mime type accepted by the client\nreceive request that the data is transferred  To transfer the offered data, the client issues this request and indicates the mime type it wants to receive. The transfer happens through the passed file descriptor (typically created with the pipe system call). The source client writes the data in the mime type representation requested and then closes the file descriptor.  The receiving client reads from the read end of the pipe until EOF and then closes its end, at which point the transfer is complete.  This request may happen multiple times for different mime types, both before and after wl_data_device.drop. Drag-and-drop destination clients may preemptively fetch data or examine it more closely to determine acceptance.  ### Parameters * mime_type: mime type desired by receiver * fd: file descriptor for data transfer\ndestroy destroy data offer  Destroy the data offer.\nfinish the offer will no longer be used  Notifies the compositor that the drag destination successfully finished the drag-and-drop operation.  Upon receiving this request, the compositor will emit wl_data_source.dnd_finished on the drag source client.  It is a client error to perform other requests than wl_data_offer.destroy after this one. It is also an error to perform this request after a NULL mime type has been set in wl_data_offer.accept or no action was received through wl_data_offer.action.  If wl_data_offer.finish request is received for a non drag and drop operation, the invalid_finish protocol error is raised.  \\since 3\nset_actions set the available/preferred drag-and-drop actions  Sets the actions that the destination side client supports for this operation. This request may trigger the emission of wl_data_source.action and wl_data_offer.action events if the compositor needs to change the selected action.  This request can be called multiple times throughout the drag-and-drop operation, typically in response to wl_data_device.enter or wl_data_device.motion events.  This request determines the final result of the drag-and-drop operation. If the end result is that no action is accepted, the drag source will receive wl_data_source.cancelled.  The dnd_actions argument must contain only values expressed in the wl_data_device_manager.dnd_actions enum, and the preferred_action argument must only contain one of those values set, otherwise it will result in a protocol error.  While managing an \"ask\" action, the destination drag-and-drop client may perform further wl_data_offer.receive requests, and is expected to perform one last wl_data_offer.set_actions request with a preferred action other than \"ask\" (and optionally wl_data_offer.accept) before requesting wl_data_offer.finish, in order to convey the action selected by the user. If the preferred action is not in the wl_data_offer.source_actions mask, an error will be raised.  If the \"ask\" action is dismissed (e.g. user cancellation), the client is expected to perform wl_data_offer.destroy right away.  This request can only be made on drag-and-drop offers, a protocol error will be raised otherwise.  \\since 3  ### Parameters * dnd_actions: actions supported by the destination client * preferred_action: action preferred by the destination client\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_listener","page":"API","title":"Wayland.LibWayland.wl_data_offer_listener","text":"wl_data_offer_listener\n\niface_wl_data_offer\n\nwl_data_offer_listener\n\nField Note\noffer advertise offered mime type  Sent immediately after creating the wl_data_offer object. One event per offered mime type.  ### Parameters * mime_type: offered mime type\nsource_actions notify the source-side available actions  This event indicates the actions offered by the data source. It will be sent right after wl_data_device.enter, or anytime the source side changes its offered actions through wl_data_source.set_actions.  \\since 3  ### Parameters * source_actions: actions offered by the data source\naction notify the selected action  This event indicates the action selected by the compositor after matching the source/destination side actions. Only one action (or none) will be offered here.  This event can be emitted multiple times during the drag-and-drop operation in response to destination side action changes through wl_data_offer.set_actions.  This event will no longer be emitted after wl_data_device.drop happened on the drag-and-drop destination, the client must honor the last action received, or the last preferred one set through wl_data_offer.set_actions when handling an \"ask\" action.  Compositors may also change the selected action on the fly, mainly in response to keyboard modifier changes during the drag-and-drop operation.  The most recent action received is always the valid one. Prior to receiving wl_data_device.drop, the chosen action may change (e.g. due to keyboard modifiers being pressed). At the time of receiving wl_data_device.drop the drag-and-drop destination must honor the last action received.  Action changes may still happen after wl_data_device.drop, especially on \"ask\" actions, where the drag-and-drop destination may choose another action afterwards. Action changes happening at this stage are always the result of inter-client negotiation, the compositor shall no longer be able to induce a different action.  Upon \"ask\" actions, it is expected that the drag-and-drop destination may potentially choose a different action and/or mime type, based on wl_data_offer.source_actions and finally chosen by the user (e.g. popping up a menu with the available options). The final wl_data_offer.set_actions and wl_data_offer.accept requests must happen before the call to wl_data_offer.finish.  \\since 3  ### Parameters * dnd_action: action selected by the compositor\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_error","page":"API","title":"Wayland.LibWayland.wl_data_source_error","text":"wl_data_source_error\n\nEnumerator Note\nWL_DATA_SOURCE_ERROR_INVALID_ACTION_MASK action mask contains invalid values\nWL_DATA_SOURCE_ERROR_INVALID_SOURCE source doesn't accept this request\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_interface","page":"API","title":"Wayland.LibWayland.wl_data_source_interface","text":"wl_data_source_interface\n\niface_wl_data_source\n\nwl_data_source_interface\n\nField Note\noffer add an offered mime type  This request adds a mime type to the set of mime types advertised to targets. Can be called several times to offer multiple types.  ### Parameters * mime_type: mime type offered by the data source\ndestroy destroy the data source  Destroy the data source.\nset_actions set the available drag-and-drop actions  Sets the actions that the source side client supports for this operation. This request may trigger wl_data_source.action and wl_data_offer.action events if the compositor needs to change the selected action.  The dnd_actions argument must contain only values expressed in the wl_data_device_manager.dnd_actions enum, otherwise it will result in a protocol error.  This request must be made once only, and can only be made on sources used in drag-and-drop, so it must be performed before wl_data_device.start_drag. Attempting to use the source other than for drag-and-drop will raise a protocol error.  \\since 3  ### Parameters * dnd_actions: actions supported by the data source\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_listener","page":"API","title":"Wayland.LibWayland.wl_data_source_listener","text":"wl_data_source_listener\n\niface_wl_data_source\n\nwl_data_source_listener\n\nField Note\ntarget a target accepts an offered mime type  Sent when a target accepts pointer_focus or motion events. If a target does not accept any of the offered types, type is NULL.  Used for feedback during drag-and-drop.  ### Parameters * mime_type: mime type accepted by the target\nsend send the data  Request for data from the client. Send the data as the specified mime type over the passed file descriptor, then close it.  ### Parameters * mime_type: mime type for the data * fd: file descriptor for the data\ncancelled selection was cancelled  This data source is no longer valid. There are several reasons why this could happen:  - The data source has been replaced by another data source. - The drag-and-drop operation was performed, but the drop destination did not accept any of the mime types offered through wl_data_source.target. - The drag-and-drop operation was performed, but the drop destination did not select any of the actions present in the mask offered through wl_data_source.action. - The drag-and-drop operation was performed but didn't happen over a surface. - The compositor cancelled the drag-and-drop operation (e.g. compositor dependent timeouts to avoid stale drag-and-drop transfers).  The client should clean up and destroy this data source.  For objects of version 2 or older, wl_data_source.cancelled will only be emitted if the data source was replaced by another data source.\ndnd_drop_performed the drag-and-drop operation physically finished  The user performed the drop action. This event does not indicate acceptance, wl_data_source.cancelled may still be emitted afterwards if the drop destination does not accept any mime type.  However, this event might however not be received if the compositor cancelled the drag-and-drop operation before this event could happen.  Note that the data_source may still be used in the future and should not be destroyed here.  \\since 3\ndnd_finished the drag-and-drop operation concluded  The drop destination finished interoperating with this data source, so the client is now free to destroy this data source and free all associated data.  If the action used to perform the operation was \"move\", the source can now delete the transferred data.  \\since 3\naction notify the selected action  This event indicates the action selected by the compositor after matching the source/destination side actions. Only one action (or none) will be offered here.  This event can be emitted multiple times during the drag-and-drop operation, mainly in response to destination side changes through wl_data_offer.set_actions, and as the data device enters/leaves surfaces.  It is only possible to receive this event after wl_data_source.dnd_drop_performed if the drag-and-drop operation ended in an \"ask\" action, in which case the final wl_data_source.action event will happen immediately before wl_data_source.dnd_finished.  Compositors may also change the selected action on the fly, mainly in response to keyboard modifier changes during the drag-and-drop operation.  The most recent action received is always the valid one. The chosen action may change alongside negotiation (e.g. an \"ask\" action can turn into a \"move\" operation), so the effects of the final action must always be applied in wl_data_offer.dnd_finished.  Clients can trigger cursor surface changes from this point, so they reflect the current action.  \\since 3  ### Parameters * dnd_action: action selected by the compositor\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_dispatcher_func_t","page":"API","title":"Wayland.LibWayland.wl_dispatcher_func_t","text":"Dispatcher function type alias\n\nA dispatcher is a function that handles the emitting of callbacks in client code. For programs directly using the C library, this is done by using libffi to call function pointers. When binding to languages other than C, dispatchers provide a way to abstract the function calling process to be friendlier to other function calling systems.\n\nA dispatcher takes five arguments: The first is the dispatcher-specific implementation associated with the target object. The second is the object upon which the callback is being invoked (either wl_proxy or wl_resource). The third and fourth arguments are the opcode and the wl_message corresponding to the callback. The final argument is an array of arguments received from the other process via the wire protocol.\n\nParameters\n\n\"const: void *\" Dispatcher-specific implementation data\n\"void: *\" Callback invocation target (wl_proxy or wl_resource)\nuint32_t: Callback opcode\n\"const: struct wl_message *\" Callback message signature\n\"union: wl_argument *\" Array of received arguments\n\nReturns\n\n0 on success, or -1 on failure\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_display","page":"API","title":"Wayland.LibWayland.wl_display","text":"wl_display\n\nRepresents a connection to the compositor and acts as a proxy to the wl_display singleton object.\n\nA wl_display object represents a client connection to a Wayland compositor. It is created with either wldisplayconnect() or wldisplayconnecttofd(). A connection is terminated using wldisplaydisconnect().\n\nA wl_display is also used as the wlproxy for the [`wldisplay`](@ref) singleton object on the compositor side.\n\nA wl_display object handles all the data sent from and to the compositor. When a wlproxy marshals a request, it will write its wire representation to the display's write buffer. The data is sent to the compositor when the client calls wldisplay_flush().\n\nIncoming data is handled in two steps: queueing and dispatching. In the queue step, the data coming from the display fd is interpreted and added to a queue. On the dispatch step, the handler for the incoming event set by the client on the corresponding wl_proxy is called.\n\nA wl_display has at least one event queue, called the <em>default queue</em>. Clients can create additional event queues with wldisplaycreatequeue() and assign wlproxy's to it. Events occurring in a particular proxy are always queued in its assigned queue. A client can ensure that a certain assumption, such as holding a lock or running from a given thread, is true when a proxy event handler is called by assigning that proxy to an event queue and making sure that this queue is only dispatched when the assumption holds.\n\nThe default queue is dispatched by calling wldisplaydispatch(). This will dispatch any events queued on the default queue and attempt to read from the display fd if it's empty. Events read are then queued on the appropriate queues according to the proxy assignment.\n\nA user created queue is dispatched with wldisplaydispatchqueue(). This function behaves exactly the same as [`wldisplay_dispatch`](@ref)() but it dispatches given queue instead of the default queue.\n\nA real world example of event queue usage is Mesa's implementation of eglSwapBuffers() for the Wayland platform. This function might need to block until a frame callback is received, but dispatching the default queue could cause an event handler on the client to start drawing again. This problem is solved using another event queue, so that only the events handled by the EGL code are dispatched during the block.\n\nThis creates a problem where a thread dispatches a non-default queue, reading all the data from the display fd. If the application would call poll(2) after that it would block, even though there might be events queued on the default queue. Those events should be dispatched with wldisplaydispatchpending() or wldisplaydispatchqueue_pending() before flushing and blocking.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_display_error","page":"API","title":"Wayland.LibWayland.wl_display_error","text":"wl_display_error\n\niface_wl_display\n\nglobal error values\n\nThese errors are global and can be emitted in response to any server request.\n\nEnumerator Note\nWL_DISPLAY_ERROR_INVALID_OBJECT server couldn't find object\nWL_DISPLAY_ERROR_INVALID_METHOD method doesn't exist on the specified interface or malformed request\nWL_DISPLAY_ERROR_NO_MEMORY server is out of memory\nWL_DISPLAY_ERROR_IMPLEMENTATION implementation error in compositor\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_display_global_filter_func_t","page":"API","title":"Wayland.LibWayland.wl_display_global_filter_func_t","text":"A filter function for wl_global objects\n\nA filter function enables the server to decide which globals to advertise to each client.\n\nWhen a wl_global filter is set, the given callback function will be called during wl_global advertisement and binding.\n\nThis function should return true if the global object should be made visible to the client or false otherwise.\n\nParameters\n\nclient: The client object\nglobal: The global object to show or hide\ndata: The user data pointer\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_display_interface","page":"API","title":"Wayland.LibWayland.wl_display_interface","text":"wl_display_interface\n\niface_wl_display\n\nwl_display_interface\n\nField Note\nsync asynchronous roundtrip  The sync request asks the server to emit the 'done' event on the returned wl_callback object. Since requests are handled in-order and events are delivered in-order, this can be used as a barrier to ensure all previous requests and the resulting events have been handled.  The object returned by this request will be destroyed by the compositor after the callback is fired and as such the client must not attempt to use it after that point.  The callback_data passed in the callback is the event serial.  ### Parameters * callback: callback object for the sync request\nget_registry get global registry object  This request creates a registry object that allows the client to list and bind the global objects available from the compositor.  It should be noted that the server side resources consumed in response to a get_registry request can only be released when the client disconnects, not when the client side proxy is destroyed. Therefore, clients should invoke get_registry as infrequently as possible to avoid wasting memory.  ### Parameters * registry: global registry object\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_display_listener","page":"API","title":"Wayland.LibWayland.wl_display_listener","text":"wl_display_listener\n\niface_wl_display\n\nwl_display_listener\n\nField Note\nerror fatal error event  The error event is sent out when a fatal (non-recoverable) error has occurred. The object_id argument is the object where the error occurred, most often in response to a request to that object. The code identifies the error and is defined by the object interface. As such, each interface defines its own set of error codes. The message is a brief description of the error, for (debugging) convenience.  ### Parameters * object_id: object where the error occurred * code: error code * message: error description\ndelete_id acknowledge object ID deletion  This event is used internally by the object ID management logic. When a client deletes an object that it had created, the server will send this event to acknowledge that it has seen the delete request. When the client receives this event, it will know that it can safely reuse the object ID.  ### Parameters * id: deleted object ID\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_event_loop_fd_func_t","page":"API","title":"Wayland.LibWayland.wl_event_loop_fd_func_t","text":"File descriptor dispatch function type\n\nFunctions of this type are used as callbacks for file descriptor events.\n\nParameters\n\nfd: The file descriptor delivering the event.\nmask: Describes the kind of the event as a bitwise-or of: WL_EVENT_READABLE, WL_EVENT_WRITABLE, WL_EVENT_HANGUP, WL_EVENT_ERROR.\ndata: The user data argument of the related wl_event_loop_add_fd() call.\n\nReturns\n\nIf the event source is registered for re-check with wl_event_source_check(): 0 for all done, 1 for needing a re-check. If not registered, the return value is ignored and should be zero.\n\nSee also\n\nwl_event_loop_add_fd()  wl_event_source\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_event_loop_idle_func_t","page":"API","title":"Wayland.LibWayland.wl_event_loop_idle_func_t","text":"Idle task function type\n\nFunctions of this type are used as callbacks before blocking in wl_event_loop_dispatch().\n\nParameters\n\ndata: The user data argument of the related wl_event_loop_add_idle() call.\n\nSee also\n\nwl_event_loop_add_idle() wl_event_loop_dispatch()  wl_event_source\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_event_loop_signal_func_t","page":"API","title":"Wayland.LibWayland.wl_event_loop_signal_func_t","text":"Signal dispatch function type\n\nFunctions of this type are used as callbacks for (POSIX) signals.\n\nParameters\n\nsignal_number:\ndata: The user data argument of the related wl_event_loop_add_signal() call.\n\nReturns\n\nIf the event source is registered for re-check with wl_event_source_check(): 0 for all done, 1 for needing a re-check. If not registered, the return value is ignored and should be zero.\n\nSee also\n\nwl_event_loop_add_signal()  wl_event_source\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_event_loop_timer_func_t","page":"API","title":"Wayland.LibWayland.wl_event_loop_timer_func_t","text":"Timer dispatch function type\n\nFunctions of this type are used as callbacks for timer expiry.\n\nParameters\n\ndata: The user data argument of the related wl_event_loop_add_timer() call.\n\nReturns\n\nIf the event source is registered for re-check with wl_event_source_check(): 0 for all done, 1 for needing a re-check. If not registered, the return value is ignored and should be zero.\n\nSee also\n\nwl_event_loop_add_timer()  wl_event_source\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_event_queue","page":"API","title":"Wayland.LibWayland.wl_event_queue","text":"wl_event_queue\n\nA queue for wl_proxy object events.\n\nEvent queues allows the events on a display to be handled in a thread-safe manner. See wl_display for details.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_fixed_t","page":"API","title":"Wayland.LibWayland.wl_fixed_t","text":"Fixed-point number\n\nA wl_fixed_t is a 24.8 signed fixed-point number with a sign bit, 23 bits of integer precision and 8 bits of decimal precision. Consider wl_fixed_t as an opaque struct with methods that facilitate conversion to and from double and int types.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_interface","page":"API","title":"Wayland.LibWayland.wl_interface","text":"wl_interface\n\nProtocol object interface\n\nA wl_interface describes the API of a protocol object defined in the Wayland protocol specification. The protocol implementation uses a wl_interface within its marshalling machinery for encoding client requests.\n\nThe name of a wl_interface is the name of the corresponding protocol interface, and version represents the version of the interface. The members method_count and event_count represent the number of methods (requests) and events in the respective wl_message members.\n\nFor example, consider a protocol interface foo, marked as version 1, with two requests and one event.\n\n <interface name=\"foo\" version=\"1\">\n   <request name=\"a\"></request>\n   <request name=\"b\"></request>\n   <event name=\"c\"></event>\n </interface>\n\nGiven two wl_message arrays foo_requests and foo_events, a wl_interface for foo might be:\n\n struct wl_interface foo_interface = {\n         \"foo\", 1,\n         2, foo_requests,\n         1, foo_events\n };\n\nnote: Note\nThe server side of the protocol may define interface <em>implementation types</em> that incorporate the term interface in their name. Take care to not confuse these server-side structs with a wl_interface variable whose name also ends in interface. For example, while the server may define a type struct wl\\_foo\\_interface, the client may define a struct [wlinterface`](@ref) wl\\foo_interface`.\n\nField Note\nname Interface name\nversion Interface version\nmethod_count Number of methods (requests)\nmethods Method (request) signatures\nevent_count Number of events\nevents Event signatures\n\nSee also\n\nwl_message, wl_proxy, <a href=\"https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-Interfaces\">Interfaces</a>, <a href=\"https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-Versioning\">Versioning</a>\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_iterator_result","page":"API","title":"Wayland.LibWayland.wl_iterator_result","text":"wl_iterator_result\n\nReturn value of an iterator function\n\nEnumerator Note\nWL_ITERATOR_STOP Stop the iteration\nWL_ITERATOR_CONTINUE Continue the iteration\n\nSee also\n\nwl_client_for_each_resource_iterator_func_t, wl_client_for_each_resource\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_interface","page":"API","title":"Wayland.LibWayland.wl_keyboard_interface","text":"wl_keyboard_interface\n\niface_wl_keyboard\n\nwl_keyboard_interface\n\nField Note\nrelease release the keyboard object  \\since 3\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_key_state","page":"API","title":"Wayland.LibWayland.wl_keyboard_key_state","text":"wl_keyboard_key_state\n\niface_wl_keyboard\n\nphysical key state\n\nDescribes the physical state of a key that produced the key event.\n\nEnumerator Note\nWL_KEYBOARD_KEY_STATE_RELEASED key is not pressed\nWL_KEYBOARD_KEY_STATE_PRESSED key is pressed\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_keymap_format","page":"API","title":"Wayland.LibWayland.wl_keyboard_keymap_format","text":"wl_keyboard_keymap_format\n\niface_wl_keyboard\n\nkeyboard mapping format\n\nThis specifies the format of the keymap provided to the client with the wl_keyboard.keymap event.\n\nEnumerator Note\nWL_KEYBOARD_KEYMAP_FORMAT_NO_KEYMAP no keymap; client must understand how to interpret the raw keycode\nWL_KEYBOARD_KEYMAP_FORMAT_XKB_V1 libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_listener","page":"API","title":"Wayland.LibWayland.wl_keyboard_listener","text":"wl_keyboard_listener\n\niface_wl_keyboard\n\nwl_keyboard_listener\n\nField Note\nkeymap keyboard mapping  This event provides a file descriptor to the client which can be memory-mapped to provide a keyboard mapping description.  From version 7 onwards, the fd must be mapped with MAP_PRIVATE by the recipient, as MAP_SHARED may fail.  ### Parameters * format: keymap format * fd: keymap file descriptor * size: keymap size, in bytes\nenter enter event  Notification that this seat's keyboard focus is on a certain surface.  The compositor must send the wl_keyboard.modifiers event after this event.  ### Parameters * serial: serial number of the enter event * surface: surface gaining keyboard focus * keys: the currently pressed keys\nleave leave event  Notification that this seat's keyboard focus is no longer on a certain surface.  The leave notification is sent before the enter notification for the new focus.  After this event client must assume that all keys, including modifiers, are lifted and also it must stop key repeating if there's some going on.  ### Parameters * serial: serial number of the leave event * surface: surface that lost keyboard focus\nkey key event  A key was pressed or released. The time argument is a timestamp with millisecond granularity, with an undefined base.  The key is a platform-specific key code that can be interpreted by feeding it to the keyboard mapping (see the keymap event).  If this event produces a change in modifiers, then the resulting wl_keyboard.modifiers event must be sent after this event.  ### Parameters * serial: serial number of the key event * time: timestamp with millisecond granularity * key: key that produced the event * state: physical state of the key\nmodifiers modifier and group state  Notifies clients that the modifier and/or group state has changed, and it should update its local state.  ### Parameters * serial: serial number of the modifiers event * mods_depressed: depressed modifiers * mods_latched: latched modifiers * mods_locked: locked modifiers * group: keyboard layout\nrepeat_info repeat rate and delay  Informs the client about the keyboard's repeat rate and delay.  This event is sent as soon as the wl_keyboard object has been created, and is guaranteed to be received by the client before any key press event.  Negative values for either rate or delay are illegal. A rate of zero will disable any repeating (regardless of the value of delay).  This event can be sent later on as well with a new value if necessary, so clients should continue listening for the event past the creation of wl_keyboard.  \\since 4  ### Parameters * rate: the rate of repeating keys in characters per second * delay: delay in milliseconds since key down until repeating starts\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_list","page":"API","title":"Wayland.LibWayland.wl_list","text":"wl_list\n\nwl_list\n\nDoubly-linked list\n\nOn its own, an instance of struct [wllist](@ref) represents the sentinel head of a doubly-linked list, and must be initialized using [`wllist_init](@ref)(). When empty, the list head'snextandprevmembers point to the list head itself, otherwisenextreferences the first element in the list, andprev` refers to the last element in the list.\n\nUse the struct [wllist](@ref) type to represent both the list head and the links between elements within the list. Use [`wllist_empty`](@ref)() to determine if the list is empty in O(1).\n\nAll elements in the list must be of the same type. The element type must have a struct [wllist](@ref) member, often named link by convention. Prior to insertion, there is no need to initialize an element's link - invoking [`wllistinit](@ref)() on an individual list element'sstruct [`wllist](@ref) member is unnecessary if the very next operation is wl_list_insert(). However, a common idiom is to initialize an element's link prior to removal - ensure safety by invoking wl_list_init() before wl_list_remove().\n\nConsider a list reference struct [wllist`](@ref) foo\\list, an element type asstruct element, and an element's link member asstruct wl_list link`.\n\nThe following code initializes a list and adds three elements to it.\n\n struct wl_list foo_list;\n struct element {\n         int foo;\n         struct wl_list link;\n };\n struct element e1, e2, e3;\n wl_list_init(&foo_list);\n wl_list_insert(&foo_list, &e1.link);   // e1 is the first element\n wl_list_insert(&foo_list, &e2.link);   // e2 is now the first element\n wl_list_insert(&e2.link, &e3.link); // insert e3 after e2\n\nThe list now looks like <em>[e2, e3, e1]</em>.\n\nThe wl_list API provides some iterator macros. For example, to iterate a list in ascending order:\n\n struct element *e;\n wl_list_for_each(e, foo_list, link) {\n         do_something_with_element(e);\n }\n\nSee the documentation of each iterator for details.\n\nField Note\nprev Previous list element\nnext Next list element\n\nSee also\n\nhttp://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/include/linux/list.h\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_listener","page":"API","title":"Wayland.LibWayland.wl_listener","text":"wl_listener\n\nwl_listener\n\nA single listener for Wayland signals\n\nwl_listener provides the means to listen for wl_signal notifications. Many Wayland objects use wl_listener for notification of significant events like object destruction.\n\nClients should create wl_listener objects manually and can register them as listeners to signals using #wl_signal_add, assuming the signal is directly accessible. For opaque structs like wl_event_loop, adding a listener should be done through provided accessor methods. A listener can only listen to one signal at a time.\n\n struct wl_listener your_listener;\n your_listener.notify = your_callback_method;\n // Direct access\n wl_signal_add(&some_object->destroy_signal, &your_listener);\n // Accessor access\n wl_event_loop *loop = ...;\n wl_event_loop_add_destroy_listener(loop, &your_listener);\n\nIf the listener is part of a larger struct, #wl_container_of can be used to retrieve a pointer to it:\n\n void your_listener(struct wl_listener *listener, void *data)\n {\n \tstruct your_data *data;\n \tyour_data = wl_container_of(listener, data, your_member_name);\n }\n\nIf you need to remove a listener from a signal, use wl_list_remove().\n\n wl_list_remove(&your_listener.link);\n\nSee also\n\nwl_signal\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_log_func_t","page":"API","title":"Wayland.LibWayland.wl_log_func_t","text":"Log function type alias\n\nThe C implementation of the Wayland protocol abstracts the details of logging. Users may customize the logging behavior, with a function conforming to the wl_log_func_t type, via wl_log_set_handler_client and wl_log_set_handler_server.\n\nA wl_log_func_t must conform to the expectations of vprintf, and expects two arguments: a string to write and a corresponding variable argument list. While the string to write may contain format specifiers and use values in the variable argument list, the behavior of any wl_log_func_t depends on the implementation.\n\nnote: Note\nTake care to not confuse this with wl_protocol_logger_func_t, which is a specific server-side logger for requests and events.\n\nParameters\n\n\"const: char *\" String to write to the log, containing optional format specifiers\n\"va_list\": Variable argument list\n\nSee also\n\nwl_log_set_handler_client, wl_log_set_handler_server\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_message","page":"API","title":"Wayland.LibWayland.wl_message","text":"wl_message\n\nProtocol message signature\n\nA wl_message describes the signature of an actual protocol message, such as a request or event, that adheres to the Wayland protocol wire format. The protocol implementation uses a wl_message within its demarshal machinery for decoding messages between a compositor and its clients. In a sense, a wl_message is to a protocol message like a class is to an object.\n\nThe name of a wl_message is the name of the corresponding protocol message.\n\nThe signature is an ordered list of symbols representing the data types of message arguments and, optionally, a protocol version and indicators for nullability. A leading integer in the signature indicates the _since_ version of the protocol message. A ? preceding a data type symbol indicates that the following argument type is nullable. While it is a protocol violation to send messages with non-nullable arguments set to NULL, event handlers in clients might still get called with non-nullable object arguments set to NULL. This can happen when the client destroyed the object being used as argument on its side and an event referencing that object was sent before the server knew about its destruction. As this race cannot be prevented, clients should - as a general rule - program their event handlers such that they can handle object arguments declared non-nullable being NULL gracefully.\n\nWhen no arguments accompany a message, signature is an empty string.\n\nSymbols:\n\ni: int * u: uint * f: fixed * s: string * o: object * n: new_id * a: array * h: fd * ?: following argument is nullable\n\nWhile demarshaling primitive arguments is straightforward, when demarshaling messages containing object or new_id arguments, the protocol implementation often must determine the type of the object. The types of a wl_message is an array of wl_interface references that correspond to o and n arguments in signature, with NULL placeholders for arguments with non-object types.\n\nConsider the protocol event wl_display delete_id that has a single uint argument. The wl_message is:\n\n { \"delete_id\", \"u\", [NULL] }\n\nHere, the message name is \"delete\\_id\", the signature is \"u\", and the argument types is [NULL], indicating that the uint argument has no corresponding wl_interface since it is a primitive argument.\n\nIn contrast, consider a wl_foo interface supporting protocol request bar that has existed since version 2, and has two arguments: a uint and an object of type wl_baz_interface that may be NULL. Such a wl_message might be:\n\n { \"bar\", \"2u?o\", [NULL, &wl_baz_interface] }\n\nHere, the message name is \"bar\", and the signature is \"2u?o\". Notice how the 2 indicates the protocol version, the u indicates the first argument type is uint, and the ?o indicates that the second argument is an object that may be NULL. Lastly, the argument types array indicates that no wl_interface corresponds to the first argument, while the type wl_baz_interface corresponds to the second argument.\n\nField Note\nname Message name\nsignature Message signature\ntypes Object argument interfaces\n\nSee also\n\nwl_argument, wl_interface, <a href=\"https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-Wire-Format\">Wire Format</a>\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_object","page":"API","title":"Wayland.LibWayland.wl_object","text":"wl_object\n\nA protocol object.\n\nA wl_object is an opaque struct identifying the protocol object underlying a wl_proxy or wl_resource.\n\nnote: Note\nFunctions accessing a wl_object are not normally used by client code. Clients should normally use the higher level interface generated by the scanner to interact with compositor objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_output_interface","page":"API","title":"Wayland.LibWayland.wl_output_interface","text":"wl_output_interface\n\niface_wl_output\n\nwl_output_interface\n\nField Note\nrelease release the output object  Using this request a client can tell the server that it is not going to use the output object anymore.  \\since 3\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_output_listener","page":"API","title":"Wayland.LibWayland.wl_output_listener","text":"wl_output_listener\n\niface_wl_output\n\nwl_output_listener\n\nField Note\ngeometry properties of the output  The geometry event describes geometric properties of the output. The event is sent when binding to the output object and whenever any of the properties change.  The physical size can be set to zero if it doesn't make sense for this output (e.g. for projectors or virtual outputs).  Note: wl_output only advertises partial information about the output position and identification. Some compositors, for instance those not implementing a desktop-style output layout or those exposing virtual outputs, might fake this information. Instead of using x and y, clients should use xdg_output.logical_position. Instead of using make and model, clients should use xdg_output.name and xdg_output.description.  ### Parameters * x: x position within the global compositor space * y: y position within the global compositor space * physical_width: width in millimeters of the output * physical_height: height in millimeters of the output * subpixel: subpixel orientation of the output * make: textual description of the manufacturer * model: textual description of the model * transform: transform that maps framebuffer to output\nmode advertise available modes for the output  The mode event describes an available mode for the output.  The event is sent when binding to the output object and there will always be one mode, the current mode. The event is sent again if an output changes mode, for the mode that is now current. In other words, the current mode is always the last mode that was received with the current flag set.  Non-current modes are deprecated. A compositor can decide to only advertise the current mode and never send other modes. Clients should not rely on non-current modes.  The size of a mode is given in physical hardware units of the output device. This is not necessarily the same as the output size in the global compositor space. For instance, the output may be scaled, as described in wl_output.scale, or transformed, as described in wl_output.transform. Clients willing to retrieve the output size in the global compositor space should use xdg_output.logical_size instead.  The vertical refresh rate can be set to zero if it doesn't make sense for this output (e.g. for virtual outputs).  Clients should not use the refresh rate to schedule frames. Instead, they should use the wl_surface.frame event or the presentation-time protocol.  Note: this information is not always meaningful for all outputs. Some compositors, such as those exposing virtual outputs, might fake the refresh rate or the size.  ### Parameters * flags: bitfield of mode flags * width: width of the mode in hardware units * height: height of the mode in hardware units * refresh: vertical refresh rate in mHz\ndone sent all information about output  This event is sent after all other properties have been sent after binding to the output object and after any other property changes done after that. This allows changes to the output properties to be seen as atomic, even if they happen via multiple events.  \\since 2\nscale output scaling properties  This event contains scaling geometry information that is not in the geometry event. It may be sent after binding the output object or if the output scale changes later. If it is not sent, the client should assume a scale of 1.  A scale larger than 1 means that the compositor will automatically scale surface buffers by this amount when rendering. This is used for very high resolution displays where applications rendering at the native resolution would be too small to be legible.  It is intended that scaling aware clients track the current output of a surface, and if it is on a scaled output it should use wl_surface.set_buffer_scale with the scale of the output. That way the compositor can avoid scaling the surface, and the client can supply a higher detail image.  \\since 2  ### Parameters * factor: scaling factor of output\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_output_mode","page":"API","title":"Wayland.LibWayland.wl_output_mode","text":"wl_output_mode\n\niface_wl_output\n\nmode information\n\nThese flags describe properties of an output mode. They are used in the flags bitfield of the mode event.\n\nEnumerator Note\nWL_OUTPUT_MODE_CURRENT indicates this is the current mode\nWL_OUTPUT_MODE_PREFERRED indicates this is the preferred mode\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_output_subpixel","page":"API","title":"Wayland.LibWayland.wl_output_subpixel","text":"wl_output_subpixel\n\niface_wl_output\n\nsubpixel geometry information\n\nThis enumeration describes how the physical pixels on an output are laid out.\n\nEnumerator Note\nWL_OUTPUT_SUBPIXEL_UNKNOWN unknown geometry\nWL_OUTPUT_SUBPIXEL_NONE no geometry\nWL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB horizontal RGB\nWL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR horizontal BGR\nWL_OUTPUT_SUBPIXEL_VERTICAL_RGB vertical RGB\nWL_OUTPUT_SUBPIXEL_VERTICAL_BGR vertical BGR\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_output_transform","page":"API","title":"Wayland.LibWayland.wl_output_transform","text":"wl_output_transform\n\niface_wl_output\n\ntransform from framebuffer to output\n\nThis describes the transform that a compositor will apply to a surface to compensate for the rotation or mirroring of an output device.\n\nThe flipped values correspond to an initial flip around a vertical axis followed by rotation.\n\nThe purpose is mainly to allow clients to render accordingly and tell the compositor, so that for fullscreen surfaces, the compositor will still be able to scan out directly from client surfaces.\n\nEnumerator Note\nWL_OUTPUT_TRANSFORM_NORMAL no transform\nWL_OUTPUT_TRANSFORM_90 90 degrees counter-clockwise\nWL_OUTPUT_TRANSFORM_180 180 degrees counter-clockwise\nWL_OUTPUT_TRANSFORM_270 270 degrees counter-clockwise\nWL_OUTPUT_TRANSFORM_FLIPPED 180 degree flip around a vertical axis\nWL_OUTPUT_TRANSFORM_FLIPPED_90 flip and rotate 90 degrees counter-clockwise\nWL_OUTPUT_TRANSFORM_FLIPPED_180 flip and rotate 180 degrees counter-clockwise\nWL_OUTPUT_TRANSFORM_FLIPPED_270 flip and rotate 270 degrees counter-clockwise\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_axis","page":"API","title":"Wayland.LibWayland.wl_pointer_axis","text":"wl_pointer_axis\n\niface_wl_pointer\n\naxis types\n\nDescribes the axis types of scroll events.\n\nEnumerator Note\nWL_POINTER_AXIS_VERTICAL_SCROLL vertical axis\nWL_POINTER_AXIS_HORIZONTAL_SCROLL horizontal axis\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_axis_source","page":"API","title":"Wayland.LibWayland.wl_pointer_axis_source","text":"wl_pointer_axis_source\n\niface_wl_pointer\n\naxis source types\n\nDescribes the source types for axis events. This indicates to the client how an axis event was physically generated; a client may adjust the user interface accordingly. For example, scroll events from a \"finger\" source may be in a smooth coordinate space with kinetic scrolling whereas a \"wheel\" source may be in discrete steps of a number of lines.\n\nThe \"continuous\" axis source is a device generating events in a continuous coordinate space, but using something other than a finger. One example for this source is button-based scrolling where the vertical motion of a device is converted to scroll events while a button is held down.\n\nThe \"wheel tilt\" axis source indicates that the actual device is a wheel but the scroll event is not caused by a rotation but a (usually sideways) tilt of the wheel.\n\nEnumerator Note\nWL_POINTER_AXIS_SOURCE_WHEEL a physical wheel rotation\nWL_POINTER_AXIS_SOURCE_FINGER finger on a touch surface\nWL_POINTER_AXIS_SOURCE_CONTINUOUS continuous coordinate space\nWL_POINTER_AXIS_SOURCE_WHEEL_TILT a physical wheel tilt  \\since 6\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_button_state","page":"API","title":"Wayland.LibWayland.wl_pointer_button_state","text":"wl_pointer_button_state\n\niface_wl_pointer\n\nphysical button state\n\nDescribes the physical state of a button that produced the button event.\n\nEnumerator Note\nWL_POINTER_BUTTON_STATE_RELEASED the button is not pressed\nWL_POINTER_BUTTON_STATE_PRESSED the button is pressed\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_error","page":"API","title":"Wayland.LibWayland.wl_pointer_error","text":"wl_pointer_error\n\nEnumerator Note\nWL_POINTER_ERROR_ROLE given wl_surface has another role\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_interface","page":"API","title":"Wayland.LibWayland.wl_pointer_interface","text":"wl_pointer_interface\n\niface_wl_pointer\n\nwl_pointer_interface\n\nField Note\nset_cursor set the pointer surface  Set the pointer surface, i.e., the surface that contains the pointer image (cursor). This request gives the surface the role of a cursor. If the surface already has another role, it raises a protocol error.  The cursor actually changes only if the pointer focus for this device is one of the requesting client's surfaces or the surface parameter is the current pointer surface. If there was a previous surface set with this request it is replaced. If surface is NULL, the pointer image is hidden.  The parameters hotspot_x and hotspot_y define the position of the pointer surface relative to the pointer location. Its top-left corner is always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the coordinates of the pointer location, in surface-local coordinates.  On surface.attach requests to the pointer surface, hotspot_x and hotspot_y are decremented by the x and y parameters passed to the request. Attach must be confirmed by wl_surface.commit as usual.  The hotspot can also be updated by passing the currently set pointer surface to this request with new values for hotspot_x and hotspot_y.  The current and pending input regions of the wl_surface are cleared, and wl_surface.set_input_region is ignored until the wl_surface is no longer used as the cursor. When the use as a cursor ends, the current and pending input regions become undefined, and the wl_surface is unmapped.  ### Parameters * serial: serial number of the enter event * surface: pointer surface * hotspot_x: surface-local x coordinate * hotspot_y: surface-local y coordinate\nrelease release the pointer object  Using this request a client can tell the server that it is not going to use the pointer object anymore.  This request destroys the pointer proxy object, so clients must not call wl_pointer_destroy() after using this request.  \\since 3\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_listener","page":"API","title":"Wayland.LibWayland.wl_pointer_listener","text":"wl_pointer_listener\n\niface_wl_pointer\n\nwl_pointer_listener\n\nField Note\nenter enter event  Notification that this seat's pointer is focused on a certain surface.  When a seat's focus enters a surface, the pointer image is undefined and a client should respond to this event by setting an appropriate pointer image with the set_cursor request.  ### Parameters * serial: serial number of the enter event * surface: surface entered by the pointer * surface_x: surface-local x coordinate * surface_y: surface-local y coordinate\nleave leave event  Notification that this seat's pointer is no longer focused on a certain surface.  The leave notification is sent before the enter notification for the new focus.  ### Parameters * serial: serial number of the leave event * surface: surface left by the pointer\nmotion pointer motion event  Notification of pointer location change. The arguments surface_x and surface_y are the location relative to the focused surface.  ### Parameters * time: timestamp with millisecond granularity * surface_x: surface-local x coordinate * surface_y: surface-local y coordinate\nbutton pointer button event  Mouse button click and release notifications.  The location of the click is given by the last motion or enter event. The time argument is a timestamp with millisecond granularity, with an undefined base.  The button is a button code as defined in the Linux kernel's linux/input-event-codes.h header file, e.g. BTN_LEFT.  Any 16-bit button code value is reserved for future additions to the kernel's event code list. All other button codes above 0xFFFF are currently undefined but may be used in future versions of this protocol.  ### Parameters * serial: serial number of the button event * time: timestamp with millisecond granularity * button: button that produced the event * state: physical state of the button\naxis axis event  Scroll and other axis notifications.  For scroll events (vertical and horizontal scroll axes), the value parameter is the length of a vector along the specified axis in a coordinate space identical to those of motion events, representing a relative movement along the specified axis.  For devices that support movements non-parallel to axes multiple axis events will be emitted.  When applicable, for example for touch pads, the server can choose to emit scroll events where the motion vector is equivalent to a motion event vector.  When applicable, a client can transform its content relative to the scroll distance.  ### Parameters * time: timestamp with millisecond granularity * axis: axis type * value: length of vector in surface-local coordinate space\nframe end of a pointer event sequence  Indicates the end of a set of events that logically belong together. A client is expected to accumulate the data in all events within the frame before proceeding.  All wl_pointer events before a wl_pointer.frame event belong logically together. For example, in a diagonal scroll motion the compositor will send an optional wl_pointer.axis_source event, two wl_pointer.axis events (horizontal and vertical) and finally a wl_pointer.frame event. The client may use this information to calculate a diagonal vector for scrolling.  When multiple wl_pointer.axis events occur within the same frame, the motion vector is the combined motion of all events. When a wl_pointer.axis and a wl_pointer.axis_stop event occur within the same frame, this indicates that axis movement in one axis has stopped but continues in the other axis. When multiple wl_pointer.axis_stop events occur within the same frame, this indicates that these axes stopped in the same instance.  A wl_pointer.frame event is sent for every logical event group, even if the group only contains a single wl_pointer event. Specifically, a client may get a sequence: motion, frame, button, frame, axis, frame, axis_stop, frame.  The wl_pointer.enter and wl_pointer.leave events are logical events generated by the compositor and not the hardware. These events are also grouped by a wl_pointer.frame. When a pointer moves from one surface to another, a compositor should group the wl_pointer.leave event within the same wl_pointer.frame. However, a client must not rely on wl_pointer.leave and wl_pointer.enter being in the same wl_pointer.frame. Compositor-specific policies may require the wl_pointer.leave and wl_pointer.enter event being split across multiple wl_pointer.frame groups.  \\since 5\naxis_source axis source event  Source information for scroll and other axes.  This event does not occur on its own. It is sent before a wl_pointer.frame event and carries the source information for all events within that frame.  The source specifies how this event was generated. If the source is wl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be sent when the user lifts the finger off the device.  If the source is wl_pointer.axis_source.wheel, wl_pointer.axis_source.wheel_tilt or wl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may or may not be sent. Whether a compositor sends an axis_stop event for these sources is hardware-specific and implementation-dependent; clients must not rely on receiving an axis_stop event for these scroll sources and should treat scroll sequences from these scroll sources as unterminated by default.  This event is optional. If the source is unknown for a particular axis event sequence, no event is sent. Only one wl_pointer.axis_source event is permitted per frame.  The order of wl_pointer.axis_discrete and wl_pointer.axis_source is not guaranteed.  \\since 5  ### Parameters * axis_source: source of the axis event\naxis_stop axis stop event  Stop notification for scroll and other axes.  For some wl_pointer.axis_source types, a wl_pointer.axis_stop event is sent to notify a client that the axis sequence has terminated. This enables the client to implement kinetic scrolling. See the wl_pointer.axis_source documentation for information on when this event may be generated.  Any wl_pointer.axis events with the same axis_source after this event should be considered as the start of a new axis motion.  The timestamp is to be interpreted identical to the timestamp in the wl_pointer.axis event. The timestamp value may be the same as a preceding wl_pointer.axis event.  \\since 5  ### Parameters * time: timestamp with millisecond granularity * axis: the axis stopped with this event\naxis_discrete axis click event  Discrete step information for scroll and other axes.  This event carries the axis value of the wl_pointer.axis event in discrete steps (e.g. mouse wheel clicks).  This event does not occur on its own, it is coupled with a wl_pointer.axis event that represents this axis value on a continuous scale. The protocol guarantees that each axis_discrete event is always followed by exactly one axis event with the same axis number within the same wl_pointer.frame. Note that the protocol allows for other events to occur between the axis_discrete and its coupled axis event, including other axis_discrete or axis events.  This event is optional; continuous scrolling devices like two-finger scrolling on touchpads do not have discrete steps and do not generate this event.  The discrete value carries the directional information. e.g. a value of -2 is two steps towards the negative direction of this axis.  The axis number is identical to the axis number in the associated axis event.  The order of wl_pointer.axis_discrete and wl_pointer.axis_source is not guaranteed.  \\since 5  ### Parameters * axis: axis type * discrete: number of steps\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_proxy","page":"API","title":"Wayland.LibWayland.wl_proxy","text":"wl_proxy\n\nRepresents a protocol object on the client side.\n\nA wl_proxy acts as a client side proxy to an object existing in the compositor. The proxy is responsible for converting requests made by the clients with wlproxymarshal() into Wayland's wire format. Events coming from the compositor are also handled by the proxy, which will in turn call the handler set with wlproxyadd_listener().\n\nnote: Note\nWith the exception of function wlproxysetqueue(), functions accessing a [`wlproxy`](@ref) are not normally used by client code. Clients should normally use the higher level interface generated by the scanner to interact with compositor objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_region_interface","page":"API","title":"Wayland.LibWayland.wl_region_interface","text":"wl_region_interface\n\niface_wl_region\n\nwl_region_interface\n\nField Note\ndestroy destroy region  Destroy the region. This will invalidate the object ID.\nadd add rectangle to region  Add the specified rectangle to the region.  ### Parameters * x: region-local x coordinate * y: region-local y coordinate * width: rectangle width * height: rectangle height\nsubtract subtract rectangle from region  Subtract the specified rectangle from the region.  ### Parameters * x: region-local x coordinate * y: region-local y coordinate * width: rectangle width * height: rectangle height\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_interface","page":"API","title":"Wayland.LibWayland.wl_registry_interface","text":"wl_registry_interface\n\niface_wl_registry\n\nwl_registry_interface\n\nField Note\nbind bind an object to the display  Binds a new, client-created object to the server using the specified name as the identifier.  ### Parameters * name: unique numeric name of the object * interface: name of the objects interface * version: version of the objects interface * id: bounded object\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_listener","page":"API","title":"Wayland.LibWayland.wl_registry_listener","text":"wl_registry_listener\n\niface_wl_registry\n\nwl_registry_listener\n\nField Note\nglobal announce global object  Notify the client of global objects.  The event notifies the client that a global object with the given name is now available, and it implements the given version of the given interface.  ### Parameters * name: numeric name of the global object * interface: interface implemented by the object * version: interface version\nglobal_remove announce removal of global object  Notify the client of removed global objects.  This event notifies the client that the global identified by name is no longer available. If the client bound to the global using the bind request, the client should now destroy that object.  The object remains valid and requests to the object will be ignored until the client destroys it, to avoid races between the global going away and a client sending a request to it.  ### Parameters * name: numeric name of the global object\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_capability","page":"API","title":"Wayland.LibWayland.wl_seat_capability","text":"wl_seat_capability\n\niface_wl_seat\n\nseat capability bitmask\n\nThis is a bitmask of capabilities this seat has; if a member is set, then it is present on the seat.\n\nEnumerator Note\nWL_SEAT_CAPABILITY_POINTER the seat has pointer devices\nWL_SEAT_CAPABILITY_KEYBOARD the seat has one or more keyboards\nWL_SEAT_CAPABILITY_TOUCH the seat has touch devices\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_error","page":"API","title":"Wayland.LibWayland.wl_seat_error","text":"wl_seat_error\n\niface_wl_seat\n\nwl_seat error values\n\nThese errors can be emitted in response to wl_seat requests.\n\nEnumerator Note\nWL_SEAT_ERROR_MISSING_CAPABILITY get_pointer, get_keyboard or get_touch called on seat without the matching capability\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_interface","page":"API","title":"Wayland.LibWayland.wl_seat_interface","text":"wl_seat_interface\n\niface_wl_seat\n\nwl_seat_interface\n\nField Note\nget_pointer return pointer object  The ID provided will be initialized to the wl_pointer interface for this seat.  This request only takes effect if the seat has the pointer capability, or has had the pointer capability in the past. It is a protocol violation to issue this request on a seat that has never had the pointer capability. The missing_capability error will be sent in this case.  ### Parameters * id: seat pointer\nget_keyboard return keyboard object  The ID provided will be initialized to the wl_keyboard interface for this seat.  This request only takes effect if the seat has the keyboard capability, or has had the keyboard capability in the past. It is a protocol violation to issue this request on a seat that has never had the keyboard capability. The missing_capability error will be sent in this case.  ### Parameters * id: seat keyboard\nget_touch return touch object  The ID provided will be initialized to the wl_touch interface for this seat.  This request only takes effect if the seat has the touch capability, or has had the touch capability in the past. It is a protocol violation to issue this request on a seat that has never had the touch capability. The missing_capability error will be sent in this case.  ### Parameters * id: seat touch interface\nrelease release the seat object  Using this request a client can tell the server that it is not going to use the seat object anymore.  \\since 5\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_listener","page":"API","title":"Wayland.LibWayland.wl_seat_listener","text":"wl_seat_listener\n\niface_wl_seat\n\nwl_seat_listener\n\nField Note\ncapabilities seat capabilities changed  This is emitted whenever a seat gains or loses the pointer, keyboard or touch capabilities. The argument is a capability enum containing the complete set of capabilities this seat has.  When the pointer capability is added, a client may create a wl_pointer object using the wl_seat.get_pointer request. This object will receive pointer events until the capability is removed in the future.  When the pointer capability is removed, a client should destroy the wl_pointer objects associated with the seat where the capability was removed, using the wl_pointer.release request. No further pointer events will be received on these objects.  In some compositors, if a seat regains the pointer capability and a client has a previously obtained wl_pointer object of version 4 or less, that object may start sending pointer events again. This behavior is considered a misinterpretation of the intended behavior and must not be relied upon by the client. wl_pointer objects of version 5 or later must not send events if created before the most recent event notifying the client of an added pointer capability.  The above behavior also applies to wl_keyboard and wl_touch with the keyboard and touch capabilities, respectively.  ### Parameters * capabilities: capabilities of the seat\nname unique identifier for this seat  In a multiseat configuration this can be used by the client to help identify which physical devices the seat represents. Based on the seat configuration used by the compositor.  \\since 2  ### Parameters * name: seat identifier\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_error","page":"API","title":"Wayland.LibWayland.wl_shell_error","text":"wl_shell_error\n\nEnumerator Note\nWL_SHELL_ERROR_ROLE given wl_surface has another role\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_interface","page":"API","title":"Wayland.LibWayland.wl_shell_interface","text":"wl_shell_interface\n\niface_wl_shell\n\nwl_shell_interface\n\nField Note\nget_shell_surface create a shell surface from a surface  Create a shell surface for an existing surface. This gives the wl_surface the role of a shell surface. If the wl_surface already has another role, it raises a protocol error.  Only one shell surface can be associated with a given surface.  ### Parameters * id: shell surface to create * surface: surface to be given the shell surface role\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_fullscreen_method","page":"API","title":"Wayland.LibWayland.wl_shell_surface_fullscreen_method","text":"wl_shell_surface_fullscreen_method\n\niface_wl_shell_surface\n\ndifferent method to set the surface fullscreen\n\nHints to indicate to the compositor how to deal with a conflict between the dimensions of the surface and the dimensions of the output. The compositor is free to ignore this parameter.\n\nEnumerator Note\nWL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT no preference, apply default policy\nWL_SHELL_SURFACE_FULLSCREEN_METHOD_SCALE scale, preserve the surface's aspect ratio and center on output\nWL_SHELL_SURFACE_FULLSCREEN_METHOD_DRIVER switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch\nWL_SHELL_SURFACE_FULLSCREEN_METHOD_FILL no upscaling, center on output and add black borders to compensate size mismatch\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_interface","page":"API","title":"Wayland.LibWayland.wl_shell_surface_interface","text":"wl_shell_surface_interface\n\niface_wl_shell_surface\n\nwl_shell_surface_interface\n\nField Note\npong respond to a ping event  A client must respond to a ping event with a pong request or the client may be deemed unresponsive.  ### Parameters * serial: serial number of the ping event\nmove start an interactive move  Start a pointer-driven move of the surface.  This request must be used in response to a button press event. The server may ignore move requests depending on the state of the surface (e.g. fullscreen or maximized).  ### Parameters * seat: seat whose pointer is used * serial: serial number of the implicit grab on the pointer\nresize start an interactive resize  Start a pointer-driven resizing of the surface.  This request must be used in response to a button press event. The server may ignore resize requests depending on the state of the surface (e.g. fullscreen or maximized).  ### Parameters * seat: seat whose pointer is used * serial: serial number of the implicit grab on the pointer * edges: which edge or corner is being dragged\nset_toplevel make the surface a toplevel surface  Map the surface as a toplevel surface.  A toplevel surface is not fullscreen, maximized or transient.\nset_transient make the surface a transient surface  Map the surface relative to an existing surface.  The x and y arguments specify the location of the upper left corner of the surface relative to the upper left corner of the parent surface, in surface-local coordinates.  The flags argument controls details of the transient behaviour.  ### Parameters * parent: parent surface * x: surface-local x coordinate * y: surface-local y coordinate * flags: transient surface behavior\nset_fullscreen make the surface a fullscreen surface  Map the surface as a fullscreen surface.  If an output parameter is given then the surface will be made fullscreen on that output. If the client does not specify the output then the compositor will apply its policy - usually choosing the output on which the surface has the biggest surface area.  The client may specify a method to resolve a size conflict between the output size and the surface size - this is provided through the method parameter.  The framerate parameter is used only when the method is set to \"driver\", to indicate the preferred framerate. A value of 0 indicates that the client does not care about framerate. The framerate is specified in mHz, that is framerate of 60000 is 60Hz.  A method of \"scale\" or \"driver\" implies a scaling operation of the surface, either via a direct scaling operation or a change of the output mode. This will override any kind of output scaling, so that mapping a surface with a buffer size equal to the mode can fill the screen independent of buffer_scale.  A method of \"fill\" means we don't scale up the buffer, however any output scale is applied. This means that you may run into an edge case where the application maps a buffer with the same size of the output mode but buffer_scale 1 (thus making a surface larger than the output). In this case it is allowed to downscale the results to fit the screen.  The compositor must reply to this request with a configure event with the dimensions for the output on which the surface will be made fullscreen.  ### Parameters * method: method for resolving size conflict * framerate: framerate in mHz * output: output on which the surface is to be fullscreen\nset_popup make the surface a popup surface  Map the surface as a popup.  A popup surface is a transient surface with an added pointer grab.  An existing implicit grab will be changed to owner-events mode, and the popup grab will continue after the implicit grab ends (i.e. releasing the mouse button does not cause the popup to be unmapped).  The popup grab continues until the window is destroyed or a mouse button is pressed in any other client's window. A click in any of the client's surfaces is reported as normal, however, clicks in other clients' surfaces will be discarded and trigger the callback.  The x and y arguments specify the location of the upper left corner of the surface relative to the upper left corner of the parent surface, in surface-local coordinates.  ### Parameters * seat: seat whose pointer is used * serial: serial number of the implicit grab on the pointer * parent: parent surface * x: surface-local x coordinate * y: surface-local y coordinate * flags: transient surface behavior\nset_maximized make the surface a maximized surface  Map the surface as a maximized surface.  If an output parameter is given then the surface will be maximized on that output. If the client does not specify the output then the compositor will apply its policy - usually choosing the output on which the surface has the biggest surface area.  The compositor will reply with a configure event telling the expected new surface size. The operation is completed on the next buffer attach to this surface.  A maximized surface typically fills the entire output it is bound to, except for desktop elements such as panels. This is the main difference between a maximized shell surface and a fullscreen shell surface.  The details depend on the compositor implementation.  ### Parameters * output: output on which the surface is to be maximized\nset_title set surface title  Set a short title for the surface.  This string may be used to identify the surface in a task bar, window list, or other user interface elements provided by the compositor.  The string must be encoded in UTF-8.  ### Parameters * title: surface title\nset_class set surface class  Set a class for the surface.  The surface class identifies the general class of applications to which the surface belongs. A common convention is to use the file name (or the full path if it is a non-standard location) of the application's .desktop file as the class.  ### Parameters * class_: surface class\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_listener","page":"API","title":"Wayland.LibWayland.wl_shell_surface_listener","text":"wl_shell_surface_listener\n\niface_wl_shell_surface\n\nwl_shell_surface_listener\n\nField Note\nping ping client  Ping a client to check if it is receiving events and sending requests. A client is expected to reply with a pong request.  ### Parameters * serial: serial number of the ping\nconfigure suggest resize  The configure event asks the client to resize its surface.  The size is a hint, in the sense that the client is free to ignore it if it doesn't resize, pick a smaller size (to satisfy aspect ratio or resize in steps of NxM pixels).  The edges parameter provides a hint about how the surface was resized. The client may use this information to decide how to adjust its content to the new size (e.g. a scrolling area might adjust its content position to leave the viewable content unmoved).  The client is free to dismiss all but the last configure event it received.  The width and height arguments specify the size of the window in surface-local coordinates.  ### Parameters * edges: how the surface was resized * width: new width of the surface * height: new height of the surface\npopup_done popup interaction is done  The popup_done event is sent out when a popup grab is broken, that is, when the user clicks a surface that doesn't belong to the client owning the popup surface.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_resize","page":"API","title":"Wayland.LibWayland.wl_shell_surface_resize","text":"wl_shell_surface_resize\n\niface_wl_shell_surface\n\nedge values for resizing\n\nThese values are used to indicate which edge of a surface is being dragged in a resize operation. The server may use this information to adapt its behavior, e.g. choose an appropriate cursor image.\n\nEnumerator Note\nWL_SHELL_SURFACE_RESIZE_NONE no edge\nWL_SHELL_SURFACE_RESIZE_TOP top edge\nWL_SHELL_SURFACE_RESIZE_BOTTOM bottom edge\nWL_SHELL_SURFACE_RESIZE_LEFT left edge\nWL_SHELL_SURFACE_RESIZE_TOP_LEFT top and left edges\nWL_SHELL_SURFACE_RESIZE_BOTTOM_LEFT bottom and left edges\nWL_SHELL_SURFACE_RESIZE_RIGHT right edge\nWL_SHELL_SURFACE_RESIZE_TOP_RIGHT top and right edges\nWL_SHELL_SURFACE_RESIZE_BOTTOM_RIGHT bottom and right edges\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_resize-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_resize","text":"wl_shell_surface_resize(wl_shell_surface_, seat, serial, edges)\n\niface_wl_shell_surface\n\nStart a pointer-driven resizing of the surface.\n\nThis request must be used in response to a button press event. The server may ignore resize requests depending on the state of the surface (e.g. fullscreen or maximized).\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_transient","page":"API","title":"Wayland.LibWayland.wl_shell_surface_transient","text":"wl_shell_surface_transient\n\niface_wl_shell_surface\n\ndetails of transient behaviour\n\nThese flags specify details of the expected behaviour of transient surfaces. Used in the set_transient request.\n\nEnumerator Note\nWL_SHELL_SURFACE_TRANSIENT_INACTIVE do not set keyboard focus\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_error","page":"API","title":"Wayland.LibWayland.wl_shm_error","text":"wl_shm_error\n\niface_wl_shm\n\nwl_shm error values\n\nThese errors can be emitted in response to wl_shm requests.\n\nEnumerator Note\nWL_SHM_ERROR_INVALID_FORMAT buffer format is not known\nWL_SHM_ERROR_INVALID_STRIDE invalid size or stride during pool or buffer creation\nWL_SHM_ERROR_INVALID_FD mmapping the file descriptor failed\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_format","page":"API","title":"Wayland.LibWayland.wl_shm_format","text":"wl_shm_format\n\niface_wl_shm\n\npixel formats\n\nThis describes the memory layout of an individual pixel.\n\nAll renderers should support argb8888 and xrgb8888 but any other formats are optional and may not be supported by the particular renderer in use.\n\nThe drm format codes match the macros defined in drm_fourcc.h, except argb8888 and xrgb8888. The formats actually supported by the compositor will be reported by the format event.\n\nEnumerator Note\nWL_SHM_FORMAT_ARGB8888 32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian\nWL_SHM_FORMAT_XRGB8888 32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian\nWL_SHM_FORMAT_C8 8-bit color index format, [7:0] C\nWL_SHM_FORMAT_RGB332 8-bit RGB format, [7:0] R:G:B 3:3:2\nWL_SHM_FORMAT_BGR233 8-bit BGR format, [7:0] B:G:R 2:3:3\nWL_SHM_FORMAT_XRGB4444 16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian\nWL_SHM_FORMAT_XBGR4444 16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian\nWL_SHM_FORMAT_RGBX4444 16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian\nWL_SHM_FORMAT_BGRX4444 16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian\nWL_SHM_FORMAT_ARGB4444 16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian\nWL_SHM_FORMAT_ABGR4444 16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian\nWL_SHM_FORMAT_RGBA4444 16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian\nWL_SHM_FORMAT_BGRA4444 16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian\nWL_SHM_FORMAT_XRGB1555 16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian\nWL_SHM_FORMAT_XBGR1555 16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian\nWL_SHM_FORMAT_RGBX5551 16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian\nWL_SHM_FORMAT_BGRX5551 16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian\nWL_SHM_FORMAT_ARGB1555 16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian\nWL_SHM_FORMAT_ABGR1555 16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian\nWL_SHM_FORMAT_RGBA5551 16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian\nWL_SHM_FORMAT_BGRA5551 16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian\nWL_SHM_FORMAT_RGB565 16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian\nWL_SHM_FORMAT_BGR565 16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian\nWL_SHM_FORMAT_RGB888 24-bit RGB format, [23:0] R:G:B little endian\nWL_SHM_FORMAT_BGR888 24-bit BGR format, [23:0] B:G:R little endian\nWL_SHM_FORMAT_XBGR8888 32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian\nWL_SHM_FORMAT_RGBX8888 32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian\nWL_SHM_FORMAT_BGRX8888 32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian\nWL_SHM_FORMAT_ABGR8888 32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian\nWL_SHM_FORMAT_RGBA8888 32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian\nWL_SHM_FORMAT_BGRA8888 32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian\nWL_SHM_FORMAT_XRGB2101010 32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian\nWL_SHM_FORMAT_XBGR2101010 32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian\nWL_SHM_FORMAT_RGBX1010102 32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian\nWL_SHM_FORMAT_BGRX1010102 32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian\nWL_SHM_FORMAT_ARGB2101010 32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian\nWL_SHM_FORMAT_ABGR2101010 32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian\nWL_SHM_FORMAT_RGBA1010102 32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian\nWL_SHM_FORMAT_BGRA1010102 32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian\nWL_SHM_FORMAT_YUYV packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian\nWL_SHM_FORMAT_YVYU packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian\nWL_SHM_FORMAT_UYVY packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian\nWL_SHM_FORMAT_VYUY packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian\nWL_SHM_FORMAT_AYUV packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian\nWL_SHM_FORMAT_NV12 2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane\nWL_SHM_FORMAT_NV21 2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane\nWL_SHM_FORMAT_NV16 2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane\nWL_SHM_FORMAT_NV61 2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane\nWL_SHM_FORMAT_YUV410 3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes\nWL_SHM_FORMAT_YVU410 3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes\nWL_SHM_FORMAT_YUV411 3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes\nWL_SHM_FORMAT_YVU411 3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes\nWL_SHM_FORMAT_YUV420 3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes\nWL_SHM_FORMAT_YVU420 3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes\nWL_SHM_FORMAT_YUV422 3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes\nWL_SHM_FORMAT_YVU422 3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes\nWL_SHM_FORMAT_YUV444 3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes\nWL_SHM_FORMAT_YVU444 3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes\nWL_SHM_FORMAT_R8 [7:0] R\nWL_SHM_FORMAT_R16 [15:0] R little endian\nWL_SHM_FORMAT_RG88 [15:0] R:G 8:8 little endian\nWL_SHM_FORMAT_GR88 [15:0] G:R 8:8 little endian\nWL_SHM_FORMAT_RG1616 [31:0] R:G 16:16 little endian\nWL_SHM_FORMAT_GR1616 [31:0] G:R 16:16 little endian\nWL_SHM_FORMAT_XRGB16161616F [63:0] x:R:G:B 16:16:16:16 little endian\nWL_SHM_FORMAT_XBGR16161616F [63:0] x:B:G:R 16:16:16:16 little endian\nWL_SHM_FORMAT_ARGB16161616F [63:0] A:R:G:B 16:16:16:16 little endian\nWL_SHM_FORMAT_ABGR16161616F [63:0] A:B:G:R 16:16:16:16 little endian\nWL_SHM_FORMAT_XYUV8888 [31:0] X:Y:Cb:Cr 8:8:8:8 little endian\nWL_SHM_FORMAT_VUY888 [23:0] Cr:Cb:Y 8:8:8 little endian\nWL_SHM_FORMAT_VUY101010 Y followed by U then V, 10:10:10. Non-linear modifier only\nWL_SHM_FORMAT_Y210 [63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 10:6:10:6:10:6:10:6 little endian per 2 Y pixels\nWL_SHM_FORMAT_Y212 [63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 12:4:12:4:12:4:12:4 little endian per 2 Y pixels\nWL_SHM_FORMAT_Y216 [63:0] Cr0:Y1:Cb0:Y0 16:16:16:16 little endian per 2 Y pixels\nWL_SHM_FORMAT_Y410 [31:0] A:Cr:Y:Cb 2:10:10:10 little endian\nWL_SHM_FORMAT_Y412 [63:0] A:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian\nWL_SHM_FORMAT_Y416 [63:0] A:Cr:Y:Cb 16:16:16:16 little endian\nWL_SHM_FORMAT_XVYU2101010 [31:0] X:Cr:Y:Cb 2:10:10:10 little endian\nWL_SHM_FORMAT_XVYU12_16161616 [63:0] X:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian\nWL_SHM_FORMAT_XVYU16161616 [63:0] X:Cr:Y:Cb 16:16:16:16 little endian\nWL_SHM_FORMAT_Y0L0 [63:0] A3:A2:Y3:0:Cr0:0:Y2:0:A1:A0:Y1:0:Cb0:0:Y0:0 1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian\nWL_SHM_FORMAT_X0L0 [63:0] X3:X2:Y3:0:Cr0:0:Y2:0:X1:X0:Y1:0:Cb0:0:Y0:0 1:1:8:2:8:2:8:2:1:1:8:2:8:2:8:2 little endian\nWL_SHM_FORMAT_Y0L2 [63:0] A3:A2:Y3:Cr0:Y2:A1:A0:Y1:Cb0:Y0 1:1:10:10:10:1:1:10:10:10 little endian\nWL_SHM_FORMAT_X0L2 [63:0] X3:X2:Y3:Cr0:Y2:X1:X0:Y1:Cb0:Y0 1:1:10:10:10:1:1:10:10:10 little endian\nWL_SHM_FORMAT_YUV420_8BIT \nWL_SHM_FORMAT_YUV420_10BIT \nWL_SHM_FORMAT_XRGB8888_A8 \nWL_SHM_FORMAT_XBGR8888_A8 \nWL_SHM_FORMAT_RGBX8888_A8 \nWL_SHM_FORMAT_BGRX8888_A8 \nWL_SHM_FORMAT_RGB888_A8 \nWL_SHM_FORMAT_BGR888_A8 \nWL_SHM_FORMAT_RGB565_A8 \nWL_SHM_FORMAT_BGR565_A8 \nWL_SHM_FORMAT_NV24 non-subsampled Cr:Cb plane\nWL_SHM_FORMAT_NV42 non-subsampled Cb:Cr plane\nWL_SHM_FORMAT_P210 2x1 subsampled Cr:Cb plane, 10 bit per channel\nWL_SHM_FORMAT_P010 2x2 subsampled Cr:Cb plane 10 bits per channel\nWL_SHM_FORMAT_P012 2x2 subsampled Cr:Cb plane 12 bits per channel\nWL_SHM_FORMAT_P016 2x2 subsampled Cr:Cb plane 16 bits per channel\nWL_SHM_FORMAT_AXBXGXRX106106106106 [63:0] A:x:B:x:G:x:R:x 10:6:10:6:10:6:10:6 little endian\nWL_SHM_FORMAT_NV15 2x2 subsampled Cr:Cb plane\nWL_SHM_FORMAT_Q410 \nWL_SHM_FORMAT_Q401 \n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_interface","page":"API","title":"Wayland.LibWayland.wl_shm_interface","text":"wl_shm_interface\n\niface_wl_shm\n\nwl_shm_interface\n\nField Note\ncreate_pool create a shm pool  Create a new wl_shm_pool object.  The pool can be used to create shared memory based buffer objects. The server will mmap size bytes of the passed file descriptor, to use as backing memory for the pool.  ### Parameters * id: pool to create * fd: file descriptor for the pool * size: pool size, in bytes\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_listener","page":"API","title":"Wayland.LibWayland.wl_shm_listener","text":"wl_shm_listener\n\niface_wl_shm\n\nwl_shm_listener\n\nField Note\nformat pixel format description  Informs the client about a valid pixel format that can be used for buffers. Known formats include argb8888 and xrgb8888.  ### Parameters * format: buffer pixel format\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_interface","page":"API","title":"Wayland.LibWayland.wl_shm_pool_interface","text":"wl_shm_pool_interface\n\niface_wl_shm_pool\n\nwl_shm_pool_interface\n\nField Note\ncreate_buffer create a buffer from the pool  Create a wl_buffer object from the pool.  The buffer is created offset bytes into the pool and has width and height as specified. The stride argument specifies the number of bytes from the beginning of one row to the beginning of the next. The format is the pixel format of the buffer and must be one of those advertised through the wl_shm.format event.  A buffer will keep a reference to the pool it was created from so it is valid to destroy the pool immediately after creating a buffer from it.  ### Parameters * id: buffer to create * offset: buffer byte offset within the pool * width: buffer width, in pixels * height: buffer height, in pixels * stride: number of bytes from the beginning of one row to the beginning of the next row * format: buffer pixel format\ndestroy destroy the pool  Destroy the shared memory pool.  The mmapped memory will be released when all buffers that have been created from this pool are gone.\nresize change the size of the pool mapping  This request will cause the server to remap the backing memory for the pool from the file descriptor passed when the pool was created, but using the new size. This request can only be used to make the pool bigger.  ### Parameters * size: new size of the pool, in bytes\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_signal","page":"API","title":"Wayland.LibWayland.wl_signal","text":"wl_signal\n\nwl_signal\n\nA source of a type of observable event\n\nSignals are recognized points where significant events can be observed. Compositors as well as the server can provide signals. Observers are wl_listener's that are added through #wl_signal_add. Signals are emitted using #wl_signal_emit, which will invoke all listeners until that listener is removed by wl_list_remove() (or whenever the signal is destroyed).\n\nSee also\n\nwl_listener for more information on using wl_signal\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_error","page":"API","title":"Wayland.LibWayland.wl_subcompositor_error","text":"wl_subcompositor_error\n\nEnumerator Note\nWL_SUBCOMPOSITOR_ERROR_BAD_SURFACE the to-be sub-surface is invalid\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_interface","page":"API","title":"Wayland.LibWayland.wl_subcompositor_interface","text":"wl_subcompositor_interface\n\niface_wl_subcompositor\n\nwl_subcompositor_interface\n\nField Note\ndestroy unbind from the subcompositor interface  Informs the server that the client will not be using this protocol object anymore. This does not affect any other objects, wl_subsurface objects included.\nget_subsurface give a surface the role sub-surface  Create a sub-surface interface for the given surface, and associate it with the given parent surface. This turns a plain wl_surface into a sub-surface.  The to-be sub-surface must not already have another role, and it must not have an existing wl_subsurface object. Otherwise a protocol error is raised.  Adding sub-surfaces to a parent is a double-buffered operation on the parent (see wl_surface.commit). The effect of adding a sub-surface becomes visible on the next time the state of the parent surface is applied.  This request modifies the behaviour of wl_surface.commit request on the sub-surface, see the documentation on wl_subsurface interface.  ### Parameters * id: the new sub-surface object ID * surface: the surface to be turned into a sub-surface * parent: the parent surface\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_error","page":"API","title":"Wayland.LibWayland.wl_subsurface_error","text":"wl_subsurface_error\n\nEnumerator Note\nWL_SUBSURFACE_ERROR_BAD_SURFACE wl_surface is not a sibling or the parent\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_interface","page":"API","title":"Wayland.LibWayland.wl_subsurface_interface","text":"wl_subsurface_interface\n\niface_wl_subsurface\n\nwl_subsurface_interface\n\nField Note\ndestroy remove sub-surface interface  The sub-surface interface is removed from the wl_surface object that was turned into a sub-surface with a wl_subcompositor.get_subsurface request. The wl_surface's association to the parent is deleted, and the wl_surface loses its role as a sub-surface. The wl_surface is unmapped immediately.\nset_position reposition the sub-surface  This schedules a sub-surface position change. The sub-surface will be moved so that its origin (top left corner pixel) will be at the location x, y of the parent surface coordinate system. The coordinates are not restricted to the parent surface area. Negative values are allowed.  The scheduled coordinates will take effect whenever the state of the parent surface is applied. When this happens depends on whether the parent surface is in synchronized mode or not. See wl_subsurface.set_sync and wl_subsurface.set_desync for details.  If more than one set_position request is invoked by the client before the commit of the parent surface, the position of a new request always replaces the scheduled position from any previous request.  The initial position is 0, 0.  ### Parameters * x: x coordinate in the parent surface * y: y coordinate in the parent surface\nplace_above restack the sub-surface  This sub-surface is taken from the stack, and put back just above the reference surface, changing the z-order of the sub-surfaces. The reference surface must be one of the sibling surfaces, or the parent surface. Using any other surface, including this sub-surface, will cause a protocol error.  The z-order is double-buffered. Requests are handled in order and applied immediately to a pending state. The final pending state is copied to the active state the next time the state of the parent surface is applied. When this happens depends on whether the parent surface is in synchronized mode or not. See wl_subsurface.set_sync and wl_subsurface.set_desync for details.  A new sub-surface is initially added as the top-most in the stack of its siblings and parent.  ### Parameters * sibling: the reference surface\nplace_below restack the sub-surface  The sub-surface is placed just below the reference surface. See wl_subsurface.place_above.  ### Parameters * sibling: the reference surface\nset_sync set sub-surface to synchronized mode  Change the commit behaviour of the sub-surface to synchronized mode, also described as the parent dependent mode.  In synchronized mode, wl_surface.commit on a sub-surface will accumulate the committed state in a cache, but the state will not be applied and hence will not change the compositor output. The cached state is applied to the sub-surface immediately after the parent surface's state is applied. This ensures atomic updates of the parent and all its synchronized sub-surfaces. Applying the cached state will invalidate the cache, so further parent surface commits do not (re-)apply old state.  See wl_subsurface for the recursive effect of this mode.\nset_desync set sub-surface to desynchronized mode  Change the commit behaviour of the sub-surface to desynchronized mode, also described as independent or freely running mode.  In desynchronized mode, wl_surface.commit on a sub-surface will apply the pending state directly, without caching, as happens normally with a wl_surface. Calling wl_surface.commit on the parent surface has no effect on the sub-surface's wl_surface state. This mode allows a sub-surface to be updated on its own.  If cached state exists when wl_surface.commit is called in desynchronized mode, the pending state is added to the cached state, and applied as a whole. This invalidates the cache.  Note: even if a sub-surface is set to desynchronized, a parent sub-surface may override it to behave as synchronized. For details, see wl_subsurface.  If a surface's parent surface behaves as desynchronized, then the cached state is applied on set_desync.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_error","page":"API","title":"Wayland.LibWayland.wl_surface_error","text":"wl_surface_error\n\niface_wl_surface\n\nwl_surface error values\n\nThese errors can be emitted in response to wl_surface requests.\n\nEnumerator Note\nWL_SURFACE_ERROR_INVALID_SCALE buffer scale value is invalid\nWL_SURFACE_ERROR_INVALID_TRANSFORM buffer transform value is invalid\nWL_SURFACE_ERROR_INVALID_SIZE buffer size is invalid\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_interface","page":"API","title":"Wayland.LibWayland.wl_surface_interface","text":"wl_surface_interface\n\niface_wl_surface\n\nwl_surface_interface\n\nField Note\ndestroy delete surface  Deletes the surface and invalidates its object ID.\nattach set the surface contents  Set a buffer as the content of this surface.  The new size of the surface is calculated based on the buffer size transformed by the inverse buffer_transform and the inverse buffer_scale. This means that at commit time the supplied buffer size must be an integer multiple of the buffer_scale. If that's not the case, an invalid_size error is sent.  The x and y arguments specify the location of the new pending buffer's upper left corner, relative to the current buffer's upper left corner, in surface-local coordinates. In other words, the x and y, combined with the new surface size define in which directions the surface's size changes.  Surface contents are double-buffered state, see wl_surface.commit.  The initial surface contents are void; there is no content. wl_surface.attach assigns the given wl_buffer as the pending wl_buffer. wl_surface.commit makes the pending wl_buffer the new surface contents, and the size of the surface becomes the size calculated from the wl_buffer, as described above. After commit, there is no pending buffer until the next attach.  Committing a pending wl_buffer allows the compositor to read the pixels in the wl_buffer. The compositor may access the pixels at any time after the wl_surface.commit request. When the compositor will not access the pixels anymore, it will send the wl_buffer.release event. Only after receiving wl_buffer.release, the client may reuse the wl_buffer. A wl_buffer that has been attached and then replaced by another attach instead of committed will not receive a release event, and is not used by the compositor.  If a pending wl_buffer has been committed to more than one wl_surface, the delivery of wl_buffer.release events becomes undefined. A well behaved client should not rely on wl_buffer.release events in this case. Alternatively, a client could create multiple wl_buffer objects from the same backing storage or use wp_linux_buffer_release.  Destroying the wl_buffer after wl_buffer.release does not change the surface contents. However, if the client destroys the wl_buffer before receiving the wl_buffer.release event, the surface contents become undefined immediately.  If wl_surface.attach is sent with a NULL wl_buffer, the following wl_surface.commit will remove the surface content.  ### Parameters * buffer: buffer of surface contents * x: surface-local x coordinate * y: surface-local y coordinate\ndamage mark part of the surface damaged  This request is used to describe the regions where the pending buffer is different from the current surface contents, and where the surface therefore needs to be repainted. The compositor ignores the parts of the damage that fall outside of the surface.  Damage is double-buffered state, see wl_surface.commit.  The damage rectangle is specified in surface-local coordinates, where x and y specify the upper left corner of the damage rectangle.  The initial value for pending damage is empty: no damage. wl_surface.damage adds pending damage: the new pending damage is the union of old pending damage and the given rectangle.  wl_surface.commit assigns pending damage as the current damage, and clears pending damage. The server will clear the current damage as it repaints the surface.  Note! New clients should not use this request. Instead damage can be posted with wl_surface.damage_buffer which uses buffer coordinates instead of surface coordinates.  ### Parameters * x: surface-local x coordinate * y: surface-local y coordinate * width: width of damage rectangle * height: height of damage rectangle\nframe request a frame throttling hint  Request a notification when it is a good time to start drawing a new frame, by creating a frame callback. This is useful for throttling redrawing operations, and driving animations.  When a client is animating on a wl_surface, it can use the 'frame' request to get notified when it is a good time to draw and commit the next frame of animation. If the client commits an update earlier than that, it is likely that some updates will not make it to the display, and the client is wasting resources by drawing too often.  The frame request will take effect on the next wl_surface.commit. The notification will only be posted for one frame unless requested again. For a wl_surface, the notifications are posted in the order the frame requests were committed.  The server must send the notifications so that a client will not send excessive updates, while still allowing the highest possible update rate for clients that wait for the reply before drawing again. The server should give some time for the client to draw and commit after sending the frame callback events to let it hit the next output refresh.  A server should avoid signaling the frame callbacks if the surface is not visible in any way, e.g. the surface is off-screen, or completely obscured by other opaque surfaces.  The object returned by this request will be destroyed by the compositor after the callback is fired and as such the client must not attempt to use it after that point.  The callback_data passed in the callback is the current time, in milliseconds, with an undefined base.  ### Parameters * callback: callback object for the frame request\nset_opaque_region set opaque region  This request sets the region of the surface that contains opaque content.  The opaque region is an optimization hint for the compositor that lets it optimize the redrawing of content behind opaque regions. Setting an opaque region is not required for correct behaviour, but marking transparent content as opaque will result in repaint artifacts.  The opaque region is specified in surface-local coordinates.  The compositor ignores the parts of the opaque region that fall outside of the surface.  Opaque region is double-buffered state, see wl_surface.commit.  wl_surface.set_opaque_region changes the pending opaque region. wl_surface.commit copies the pending region to the current region. Otherwise, the pending and current regions are never changed.  The initial value for an opaque region is empty. Setting the pending opaque region has copy semantics, and the wl_region object can be destroyed immediately. A NULL wl_region causes the pending opaque region to be set to empty.  ### Parameters * region: opaque region of the surface\nset_input_region set input region  This request sets the region of the surface that can receive pointer and touch events.  Input events happening outside of this region will try the next surface in the server surface stack. The compositor ignores the parts of the input region that fall outside of the surface.  The input region is specified in surface-local coordinates.  Input region is double-buffered state, see wl_surface.commit.  wl_surface.set_input_region changes the pending input region. wl_surface.commit copies the pending region to the current region. Otherwise the pending and current regions are never changed, except cursor and icon surfaces are special cases, see wl_pointer.set_cursor and wl_data_device.start_drag.  The initial value for an input region is infinite. That means the whole surface will accept input. Setting the pending input region has copy semantics, and the wl_region object can be destroyed immediately. A NULL wl_region causes the input region to be set to infinite.  ### Parameters * region: input region of the surface\ncommit commit pending surface state  Surface state (input, opaque, and damage regions, attached buffers, etc.) is double-buffered. Protocol requests modify the pending state, as opposed to the current state in use by the compositor. A commit request atomically applies all pending state, replacing the current state. After commit, the new pending state is as documented for each related request.  On commit, a pending wl_buffer is applied first, and all other state second. This means that all coordinates in double-buffered state are relative to the new wl_buffer coming into use, except for wl_surface.attach itself. If there is no pending wl_buffer, the coordinates are relative to the current surface contents.  All requests that need a commit to become effective are documented to affect double-buffered state.  Other interfaces may add further double-buffered surface state.\nset_buffer_transform sets the buffer transformation  This request sets an optional transformation on how the compositor interprets the contents of the buffer attached to the surface. The accepted values for the transform parameter are the values for wl_output.transform.  Buffer transform is double-buffered state, see wl_surface.commit.  A newly created surface has its buffer transformation set to normal.  wl_surface.set_buffer_transform changes the pending buffer transformation. wl_surface.commit copies the pending buffer transformation to the current one. Otherwise, the pending and current values are never changed.  The purpose of this request is to allow clients to render content according to the output transform, thus permitting the compositor to use certain optimizations even if the display is rotated. Using hardware overlays and scanning out a client buffer for fullscreen surfaces are examples of such optimizations. Those optimizations are highly dependent on the compositor implementation, so the use of this request should be considered on a case-by-case basis.  Note that if the transform value includes 90 or 270 degree rotation, the width of the buffer will become the surface height and the height of the buffer will become the surface width.  If transform is not one of the values from the wl_output.transform enum the invalid_transform protocol error is raised.  \\since 2  ### Parameters * transform: transform for interpreting buffer contents\nset_buffer_scale sets the buffer scaling factor  This request sets an optional scaling factor on how the compositor interprets the contents of the buffer attached to the window.  Buffer scale is double-buffered state, see wl_surface.commit.  A newly created surface has its buffer scale set to 1.  wl_surface.set_buffer_scale changes the pending buffer scale. wl_surface.commit copies the pending buffer scale to the current one. Otherwise, the pending and current values are never changed.  The purpose of this request is to allow clients to supply higher resolution buffer data for use on high resolution outputs. It is intended that you pick the same buffer scale as the scale of the output that the surface is displayed on. This means the compositor can avoid scaling when rendering the surface on that output.  Note that if the scale is larger than 1, then you have to attach a buffer that is larger (by a factor of scale in each dimension) than the desired surface size.  If scale is not positive the invalid_scale protocol error is raised.  \\since 3  ### Parameters * scale: positive scale for interpreting buffer contents\ndamage_buffer mark part of the surface damaged using buffer coordinates  This request is used to describe the regions where the pending buffer is different from the current surface contents, and where the surface therefore needs to be repainted. The compositor ignores the parts of the damage that fall outside of the surface.  Damage is double-buffered state, see wl_surface.commit.  The damage rectangle is specified in buffer coordinates, where x and y specify the upper left corner of the damage rectangle.  The initial value for pending damage is empty: no damage. wl_surface.damage_buffer adds pending damage: the new pending damage is the union of old pending damage and the given rectangle.  wl_surface.commit assigns pending damage as the current damage, and clears pending damage. The server will clear the current damage as it repaints the surface.  This request differs from wl_surface.damage in only one way - it takes damage in buffer coordinates instead of surface-local coordinates. While this generally is more intuitive than surface coordinates, it is especially desirable when using wp_viewport or when a drawing library (like EGL) is unaware of buffer scale and buffer transform.  Note: Because buffer transformation changes and damage requests may be interleaved in the protocol stream, it is impossible to determine the actual mapping between surface and buffer damage until wl_surface.commit time. Therefore, compositors wishing to take both kinds of damage into account will have to accumulate damage from the two requests separately and only transform from one to the other after receiving the wl_surface.commit.  \\since 4  ### Parameters * x: buffer-local x coordinate * y: buffer-local y coordinate * width: width of damage rectangle * height: height of damage rectangle\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_listener","page":"API","title":"Wayland.LibWayland.wl_surface_listener","text":"wl_surface_listener\n\niface_wl_surface\n\nwl_surface_listener\n\nField Note\nenter surface enters an output  This is emitted whenever a surface's creation, movement, or resizing results in some part of it being within the scanout region of an output.  Note that a surface may be overlapping with zero or more outputs.  ### Parameters * output: output entered by the surface\nleave surface leaves an output  This is emitted whenever a surface's creation, movement, or resizing results in it no longer having any part of it within the scanout region of an output.  Clients should not use the number of outputs the surface is on for frame throttling purposes. The surface might be hidden even if no leave event has been sent, and the compositor might expect new surface content updates even if no enter event has been sent. The frame event should be used instead.  ### Parameters * output: output left by the surface\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_interface","page":"API","title":"Wayland.LibWayland.wl_touch_interface","text":"wl_touch_interface\n\niface_wl_touch\n\nwl_touch_interface\n\nField Note\nrelease release the touch object  \\since 3\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_listener","page":"API","title":"Wayland.LibWayland.wl_touch_listener","text":"wl_touch_listener\n\niface_wl_touch\n\nwl_touch_listener\n\nField Note\ndown touch down event and beginning of a touch sequence  A new touch point has appeared on the surface. This touch point is assigned a unique ID. Future events from this touch point reference this ID. The ID ceases to be valid after a touch up event and may be reused in the future.  ### Parameters * serial: serial number of the touch down event * time: timestamp with millisecond granularity * surface: surface touched * id: the unique ID of this touch point * x: surface-local x coordinate * y: surface-local y coordinate\nup end of a touch event sequence  The touch point has disappeared. No further events will be sent for this touch point and the touch point's ID is released and may be reused in a future touch down event.  ### Parameters * serial: serial number of the touch up event * time: timestamp with millisecond granularity * id: the unique ID of this touch point\nmotion update of touch point coordinates  A touch point has changed coordinates.  ### Parameters * time: timestamp with millisecond granularity * id: the unique ID of this touch point * x: surface-local x coordinate * y: surface-local y coordinate\nframe end of touch frame event  Indicates the end of a set of events that logically belong together. A client is expected to accumulate the data in all events within the frame before proceeding.  A wl_touch.frame terminates at least one event but otherwise no guarantee is provided about the set of events within a frame. A client must assume that any state not updated in a frame is unchanged from the previously known state.\ncancel touch session cancelled  Sent if the compositor decides the touch stream is a global gesture. No further events are sent to the clients from that particular gesture. Touch cancellation applies to all touch points currently active on this client's surface. The client is responsible for finalizing the touch points, future touch points on this surface may reuse the touch point ID.\nshape update shape of touch point  Sent when a touchpoint has changed its shape.  This event does not occur on its own. It is sent before a wl_touch.frame event and carries the new shape information for any previously reported, or new touch points of that frame.  Other events describing the touch point such as wl_touch.down, wl_touch.motion or wl_touch.orientation may be sent within the same wl_touch.frame. A client should treat these events as a single logical touch point update. The order of wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. A wl_touch.down event is guaranteed to occur before the first wl_touch.shape event for this touch ID but both events may occur within the same wl_touch.frame.  A touchpoint shape is approximated by an ellipse through the major and minor axis length. The major axis length describes the longer diameter of the ellipse, while the minor axis length describes the shorter diameter. Major and minor are orthogonal and both are specified in surface-local coordinates. The center of the ellipse is always at the touchpoint location as reported by wl_touch.down or wl_touch.move.  This event is only sent by the compositor if the touch device supports shape reports. The client has to make reasonable assumptions about the shape if it did not receive this event.  \\since 6  ### Parameters * id: the unique ID of this touch point * major: length of the major axis in surface-local coordinates * minor: length of the minor axis in surface-local coordinates\norientation update orientation of touch point  Sent when a touchpoint has changed its orientation.  This event does not occur on its own. It is sent before a wl_touch.frame event and carries the new shape information for any previously reported, or new touch points of that frame.  Other events describing the touch point such as wl_touch.down, wl_touch.motion or wl_touch.shape may be sent within the same wl_touch.frame. A client should treat these events as a single logical touch point update. The order of wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. A wl_touch.down event is guaranteed to occur before the first wl_touch.orientation event for this touch ID but both events may occur within the same wl_touch.frame.  The orientation describes the clockwise angle of a touchpoint's major axis to the positive surface y-axis and is normalized to the -180 to +180 degree range. The granularity of orientation depends on the touch device, some devices only support binary rotation values between 0 and 90 degrees.  This event is only sent by the compositor if the touch device supports orientation reports.  \\since 6  ### Parameters * id: the unique ID of this touch point * orientation: angle between major axis and positive surface y-axis in degrees\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Wayland.LibWayland.wl_array_add-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_array_add","text":"wl_array_add(array, size)\n\nIncreases the size of the array by size bytes.\n\nwl_array\n\nParameters\n\narray: Array whose size is to be increased\nsize: Number of bytes to increase the size of the array by\n\nReturns\n\nA pointer to the beginning of the newly appended space, or NULL when resizing fails.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_array_copy-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_array_copy","text":"wl_array_copy(array, source)\n\nCopies the contents of source to array.\n\nwl_array\n\nParameters\n\narray: Destination array to copy to\nsource: Source array to copy from\n\nReturns\n\n0 on success, or -1 on failure\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_array_init-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_array_init","text":"wl_array_init(array)\n\nInitializes the array.\n\nwl_array\n\nParameters\n\narray: Array to initialize\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_array_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_array_release","text":"wl_array_release(array)\n\nReleases the array data.\n\nnote: Note\nLeaves the array in an invalid state.\n\nwl_array\n\nParameters\n\narray: Array whose data is to be released\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_buffer_add_listener","text":"wl_buffer_add_listener(wl_buffer_, listener, data)\n\niface_wl_buffer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_buffer_destroy","text":"wl_buffer_destroy(wl_buffer_)\n\niface_wl_buffer\n\nDestroy a buffer. If and how you need to release the backing storage is defined by the buffer factory interface.\n\nFor possible side-effects to a surface, see wl_surface.attach.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_buffer_get_user_data","text":"wl_buffer_get_user_data(wl_buffer_)\n\niface_wl_buffer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_send_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_buffer_send_release","text":"wl_buffer_send_release(resource_)\n\niface_wl_buffer\n\nSends an release event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_buffer_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_buffer_set_user_data","text":"wl_buffer_set_user_data(wl_buffer_, user_data)\n\niface_wl_buffer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_callback_add_listener","text":"wl_callback_add_listener(wl_callback_, listener, data)\n\niface_wl_callback\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_callback_destroy","text":"wl_callback_destroy(wl_callback_)\n\niface_wl_callback\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_callback_get_user_data","text":"wl_callback_get_user_data(wl_callback_)\n\niface_wl_callback\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_send_done-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_callback_send_done","text":"wl_callback_send_done(resource_, callback_data)\n\niface_wl_callback\n\nSends an done event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ncallback_data: request-specific data for the callback\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_callback_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_callback_set_user_data","text":"wl_callback_set_user_data(wl_callback_, user_data)\n\niface_wl_callback\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_create_region-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_compositor_create_region","text":"wl_compositor_create_region(wl_compositor_)\n\niface_wl_compositor\n\nAsk the compositor to create a new region.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_create_surface-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_compositor_create_surface","text":"wl_compositor_create_surface(wl_compositor_)\n\niface_wl_compositor\n\nAsk the compositor to create a new surface.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_compositor_destroy","text":"wl_compositor_destroy(wl_compositor_)\n\niface_wl_compositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_compositor_get_user_data","text":"wl_compositor_get_user_data(wl_compositor_)\n\niface_wl_compositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_compositor_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_compositor_set_user_data","text":"wl_compositor_set_user_data(wl_compositor_, user_data)\n\niface_wl_compositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_add_listener","text":"wl_data_device_add_listener(wl_data_device_, listener, data)\n\niface_wl_data_device\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_destroy","text":"wl_data_device_destroy(wl_data_device_)\n\niface_wl_data_device\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_get_user_data","text":"wl_data_device_get_user_data(wl_data_device_)\n\niface_wl_data_device\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_create_data_source-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_create_data_source","text":"wl_data_device_manager_create_data_source(wl_data_device_manager_)\n\niface_wl_data_device_manager\n\nCreate a new data source.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_destroy","text":"wl_data_device_manager_destroy(wl_data_device_manager_)\n\niface_wl_data_device_manager\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_get_data_device-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_get_data_device","text":"wl_data_device_manager_get_data_device(wl_data_device_manager_, seat)\n\niface_wl_data_device_manager\n\nCreate a new data device for a given seat.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_get_user_data","text":"wl_data_device_manager_get_user_data(wl_data_device_manager_)\n\niface_wl_data_device_manager\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_manager_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_manager_set_user_data","text":"wl_data_device_manager_set_user_data(wl_data_device_manager_, user_data)\n\niface_wl_data_device_manager\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_release","text":"wl_data_device_release(wl_data_device_)\n\niface_wl_data_device\n\nThis request destroys the data device.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_data_offer-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_data_offer","text":"wl_data_device_send_data_offer(resource_, id)\n\niface_wl_data_device\n\nSends an data_offer event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nid: the new data_offer object\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_drop-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_drop","text":"wl_data_device_send_drop(resource_)\n\niface_wl_data_device\n\nSends an drop event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_enter-NTuple{6, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_enter","text":"wl_data_device_send_enter(resource_, serial, surface, x, y, id)\n\niface_wl_data_device\n\nSends an enter event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the enter event\nsurface: client surface entered\nx: surface-local x coordinate\ny: surface-local y coordinate\nid: source data_offer object\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_leave-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_leave","text":"wl_data_device_send_leave(resource_)\n\niface_wl_data_device\n\nSends an leave event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_motion-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_motion","text":"wl_data_device_send_motion(resource_, time, x, y)\n\niface_wl_data_device\n\nSends an motion event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ntime: timestamp with millisecond granularity\nx: surface-local x coordinate\ny: surface-local y coordinate\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_send_selection-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_send_selection","text":"wl_data_device_send_selection(resource_, id)\n\niface_wl_data_device\n\nSends an selection event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nid: selection data_offer object\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_set_selection-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_set_selection","text":"wl_data_device_set_selection(wl_data_device_, source, serial)\n\niface_wl_data_device\n\nThis request asks the compositor to set the selection to the data from the source on behalf of the client.\n\nTo unset the selection, set the source to NULL.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_set_user_data","text":"wl_data_device_set_user_data(wl_data_device_, user_data)\n\niface_wl_data_device\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_device_start_drag-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_data_device_start_drag","text":"wl_data_device_start_drag(wl_data_device_, source, origin, icon, serial)\n\niface_wl_data_device\n\nThis request asks the compositor to start a drag-and-drop operation on behalf of the client.\n\nThe source argument is the data source that provides the data for the eventual data transfer. If source is NULL, enter, leave and motion events are sent only to the client that initiated the drag and the client is expected to handle the data passing internally. If source is destroyed, the drag-and-drop session will be cancelled.\n\nThe origin surface is the surface where the drag originates and the client must have an active implicit grab that matches the serial.\n\nThe icon surface is an optional (can be NULL) surface that provides an icon to be moved around with the cursor. Initially, the top-left corner of the icon surface is placed at the cursor hotspot, but subsequent wl_surface.attach request can move the relative position. Attach requests must be confirmed with wl_surface.commit as usual. The icon surface is given the role of a drag-and-drop icon. If the icon surface already has another role, it raises a protocol error.\n\nThe current and pending input regions of the icon wl_surface are cleared, and wl_surface.set_input_region is ignored until the wl_surface is no longer used as the icon surface. When the use as an icon ends, the current and pending input regions become undefined, and the wl_surface is unmapped.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_accept-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_accept","text":"wl_data_offer_accept(wl_data_offer_, serial, mime_type)\n\niface_wl_data_offer\n\nIndicate that the client can accept the given mime type, or NULL for not accepted.\n\nFor objects of version 2 or older, this request is used by the client to give feedback whether the client can receive the given mime type, or NULL if none is accepted; the feedback does not determine whether the drag-and-drop operation succeeds or not.\n\nFor objects of version 3 or newer, this request determines the final result of the drag-and-drop operation. If the end result is that no mime types were accepted, the drag-and-drop operation will be cancelled and the corresponding drag source will receive wl_data_source.cancelled. Clients may still use this event in conjunction with wl_data_source.action for feedback.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_add_listener","text":"wl_data_offer_add_listener(wl_data_offer_, listener, data)\n\niface_wl_data_offer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_destroy","text":"wl_data_offer_destroy(wl_data_offer_)\n\niface_wl_data_offer\n\nDestroy the data offer.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_finish-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_finish","text":"wl_data_offer_finish(wl_data_offer_)\n\niface_wl_data_offer\n\nNotifies the compositor that the drag destination successfully finished the drag-and-drop operation.\n\nUpon receiving this request, the compositor will emit wl_data_source.dnd_finished on the drag source client.\n\nIt is a client error to perform other requests than wl_data_offer.destroy after this one. It is also an error to perform this request after a NULL mime type has been set in wl_data_offer.accept or no action was received through wl_data_offer.action.\n\nIf wl_data_offer.finish request is received for a non drag and drop operation, the invalid_finish protocol error is raised.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_get_user_data","text":"wl_data_offer_get_user_data(wl_data_offer_)\n\niface_wl_data_offer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_receive-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_receive","text":"wl_data_offer_receive(wl_data_offer_, mime_type, fd)\n\niface_wl_data_offer\n\nTo transfer the offered data, the client issues this request and indicates the mime type it wants to receive. The transfer happens through the passed file descriptor (typically created with the pipe system call). The source client writes the data in the mime type representation requested and then closes the file descriptor.\n\nThe receiving client reads from the read end of the pipe until EOF and then closes its end, at which point the transfer is complete.\n\nThis request may happen multiple times for different mime types, both before and after wl_data_device.drop. Drag-and-drop destination clients may preemptively fetch data or examine it more closely to determine acceptance.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_send_action-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_send_action","text":"wl_data_offer_send_action(resource_, dnd_action)\n\niface_wl_data_offer\n\nSends an action event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ndnd_action: action selected by the compositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_send_offer-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_send_offer","text":"wl_data_offer_send_offer(resource_, mime_type)\n\niface_wl_data_offer\n\nSends an offer event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nmime_type: offered mime type\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_send_source_actions-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_send_source_actions","text":"wl_data_offer_send_source_actions(resource_, source_actions)\n\niface_wl_data_offer\n\nSends an source_actions event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nsource_actions: actions offered by the data source\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_set_actions-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_set_actions","text":"wl_data_offer_set_actions(wl_data_offer_, dnd_actions, preferred_action)\n\niface_wl_data_offer\n\nSets the actions that the destination side client supports for this operation. This request may trigger the emission of wl_data_source.action and wl_data_offer.action events if the compositor needs to change the selected action.\n\nThis request can be called multiple times throughout the drag-and-drop operation, typically in response to wl_data_device.enter or wl_data_device.motion events.\n\nThis request determines the final result of the drag-and-drop operation. If the end result is that no action is accepted, the drag source will receive wl_data_source.cancelled.\n\nThe dnd_actions argument must contain only values expressed in the wl_data_device_manager.dnd_actions enum, and the preferred_action argument must only contain one of those values set, otherwise it will result in a protocol error.\n\nWhile managing an \"ask\" action, the destination drag-and-drop client may perform further wl_data_offer.receive requests, and is expected to perform one last wl_data_offer.set_actions request with a preferred action other than \"ask\" (and optionally wl_data_offer.accept) before requesting wl_data_offer.finish, in order to convey the action selected by the user. If the preferred action is not in the wl_data_offer.source_actions mask, an error will be raised.\n\nIf the \"ask\" action is dismissed (e.g. user cancellation), the client is expected to perform wl_data_offer.destroy right away.\n\nThis request can only be made on drag-and-drop offers, a protocol error will be raised otherwise.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_offer_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_offer_set_user_data","text":"wl_data_offer_set_user_data(wl_data_offer_, user_data)\n\niface_wl_data_offer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_add_listener","text":"wl_data_source_add_listener(wl_data_source_, listener, data)\n\niface_wl_data_source\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_destroy","text":"wl_data_source_destroy(wl_data_source_)\n\niface_wl_data_source\n\nDestroy the data source.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_get_user_data","text":"wl_data_source_get_user_data(wl_data_source_)\n\niface_wl_data_source\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_offer-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_offer","text":"wl_data_source_offer(wl_data_source_, mime_type)\n\niface_wl_data_source\n\nThis request adds a mime type to the set of mime types advertised to targets. Can be called several times to offer multiple types.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_action-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_action","text":"wl_data_source_send_action(resource_, dnd_action)\n\niface_wl_data_source\n\nSends an action event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ndnd_action: action selected by the compositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_cancelled-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_cancelled","text":"wl_data_source_send_cancelled(resource_)\n\niface_wl_data_source\n\nSends an cancelled event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_dnd_drop_performed-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_dnd_drop_performed","text":"wl_data_source_send_dnd_drop_performed(resource_)\n\niface_wl_data_source\n\nSends an dnd_drop_performed event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_dnd_finished-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_dnd_finished","text":"wl_data_source_send_dnd_finished(resource_)\n\niface_wl_data_source\n\nSends an dnd_finished event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_send-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_send","text":"wl_data_source_send_send(resource_, mime_type, fd)\n\niface_wl_data_source\n\nSends an send event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nmime_type: mime type for the data\nfd: file descriptor for the data\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_send_target-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_send_target","text":"wl_data_source_send_target(resource_, mime_type)\n\niface_wl_data_source\n\nSends an target event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nmime_type: mime type accepted by the target\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_set_actions-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_set_actions","text":"wl_data_source_set_actions(wl_data_source_, dnd_actions)\n\niface_wl_data_source\n\nSets the actions that the source side client supports for this operation. This request may trigger wl_data_source.action and wl_data_offer.action events if the compositor needs to change the selected action.\n\nThe dnd_actions argument must contain only values expressed in the wl_data_device_manager.dnd_actions enum, otherwise it will result in a protocol error.\n\nThis request must be made once only, and can only be made on sources used in drag-and-drop, so it must be performed before wl_data_device.start_drag. Attempting to use the source other than for drag-and-drop will raise a protocol error.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_data_source_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_data_source_set_user_data","text":"wl_data_source_set_user_data(wl_data_source_, user_data)\n\niface_wl_data_source\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_display_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_display_add_listener","text":"wl_display_add_listener(wl_display_, listener, data)\n\niface_wl_display\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_display_get_registry-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_display_get_registry","text":"wl_display_get_registry(wl_display_)\n\niface_wl_display\n\nThis request creates a registry object that allows the client to list and bind the global objects available from the compositor.\n\nIt should be noted that the server side resources consumed in response to a get_registry request can only be released when the client disconnects, not when the client side proxy is destroyed. Therefore, clients should invoke get_registry as infrequently as possible to avoid wasting memory.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_display_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_display_get_user_data","text":"wl_display_get_user_data(wl_display_)\n\niface_wl_display\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_display_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_display_set_user_data","text":"wl_display_set_user_data(wl_display_, user_data)\n\niface_wl_display\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_display_sync-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_display_sync","text":"wl_display_sync(wl_display_)\n\niface_wl_display\n\nThe sync request asks the server to emit the 'done' event on the returned wl_callback object. Since requests are handled in-order and events are delivered in-order, this can be used as a barrier to ensure all previous requests and the resulting events have been handled.\n\nThe object returned by this request will be destroyed by the compositor after the callback is fired and as such the client must not attempt to use it after that point.\n\nThe callback_data passed in the callback is the event serial.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_event_loop_create-Tuple{}","page":"API","title":"Wayland.LibWayland.wl_event_loop_create","text":"wl_event_loop_create()\n\nwl_event_source\n\nAn abstract event source\n\nThis is the generic type for fd, timer, signal, and idle sources. Functions that operate on specific source types must not be used with a different type, even if the function signature allows it.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_fixed_from_double-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_fixed_from_double","text":"wl_fixed_from_double(d)\n\nConverts a floating-point number to a fixed-point number.\n\nParameters\n\nd: Floating-point number to convert\n\nReturns\n\nFixed-point representation of the floating-point argument\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_fixed_from_int-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_fixed_from_int","text":"wl_fixed_from_int(i)\n\nConverts an integer to a fixed-point number.\n\nParameters\n\ni: Integer to convert\n\nReturns\n\nFixed-point representation of the integer argument\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_fixed_to_double-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_fixed_to_double","text":"wl_fixed_to_double(f)\n\nConverts a fixed-point number to a floating-point number.\n\nParameters\n\nf: Fixed-point number to convert\n\nReturns\n\nFloating-point representation of the fixed-point argument\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_fixed_to_int-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_fixed_to_int","text":"wl_fixed_to_int(f)\n\nConverts a fixed-point number to an integer.\n\nParameters\n\nf: Fixed-point number to convert\n\nReturns\n\nInteger component of the fixed-point argument\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_add_listener","text":"wl_keyboard_add_listener(wl_keyboard_, listener, data)\n\niface_wl_keyboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_destroy","text":"wl_keyboard_destroy(wl_keyboard_)\n\niface_wl_keyboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_get_user_data","text":"wl_keyboard_get_user_data(wl_keyboard_)\n\niface_wl_keyboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_release","text":"wl_keyboard_release(wl_keyboard_)\n\niface_wl_keyboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_enter-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_enter","text":"wl_keyboard_send_enter(resource_, serial, surface, keys)\n\niface_wl_keyboard\n\nSends an enter event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the enter event\nsurface: surface gaining keyboard focus\nkeys: the currently pressed keys\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_key-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_key","text":"wl_keyboard_send_key(resource_, serial, time, key, state)\n\niface_wl_keyboard\n\nSends an key event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the key event\ntime: timestamp with millisecond granularity\nkey: key that produced the event\nstate: physical state of the key\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_keymap-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_keymap","text":"wl_keyboard_send_keymap(resource_, format, fd, size)\n\niface_wl_keyboard\n\nSends an keymap event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nformat: keymap format\nfd: keymap file descriptor\nsize: keymap size, in bytes\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_leave-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_leave","text":"wl_keyboard_send_leave(resource_, serial, surface)\n\niface_wl_keyboard\n\nSends an leave event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the leave event\nsurface: surface that lost keyboard focus\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_modifiers-NTuple{6, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_modifiers","text":"wl_keyboard_send_modifiers(resource_, serial, mods_depressed, mods_latched, mods_locked, group)\n\niface_wl_keyboard\n\nSends an modifiers event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the modifiers event\nmods_depressed: depressed modifiers\nmods_latched: latched modifiers\nmods_locked: locked modifiers\ngroup: keyboard layout\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_send_repeat_info-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_send_repeat_info","text":"wl_keyboard_send_repeat_info(resource_, rate, delay)\n\niface_wl_keyboard\n\nSends an repeat_info event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nrate: the rate of repeating keys in characters per second\ndelay: delay in milliseconds since key down until repeating starts\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_keyboard_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_keyboard_set_user_data","text":"wl_keyboard_set_user_data(wl_keyboard_, user_data)\n\niface_wl_keyboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_empty-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_list_empty","text":"wl_list_empty(list)\n\nDetermines if the list is empty.\n\nwl_list\n\nParameters\n\nlist: List whose emptiness is to be determined\n\nReturns\n\n1 if empty, or 0 if not empty\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_init-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_list_init","text":"wl_list_init(list)\n\nInitializes the list.\n\nwl_list\n\nParameters\n\nlist: List to initialize\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_insert-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_list_insert","text":"wl_list_insert(list, elm)\n\nInserts an element into the list, after the element represented by list. When list is a reference to the list itself (the head), set the containing struct of elm as the first element in the list.\n\nnote: Note\nIf elm is already part of a list, inserting it again will lead to list corruption.\n\nwl_list\n\nParameters\n\nlist: List element after which the new element is inserted\nelm: Link of the containing struct to insert into the list\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_insert_list-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_list_insert_list","text":"wl_list_insert_list(list, other)\n\nInserts all of the elements of one list into another, after the element represented by list.\n\nnote: Note\nThis leaves other in an invalid state.\n\nwl_list\n\nParameters\n\nlist: List element after which the other list elements will be inserted\nother: List of elements to insert\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_length-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_list_length","text":"wl_list_length(list)\n\nDetermines the length of the list.\n\nnote: Note\nThis is an O(n) operation.\n\nwl_list\n\nParameters\n\nlist: List whose length is to be determined\n\nReturns\n\nNumber of elements in the list\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_list_remove-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_list_remove","text":"wl_list_remove(elm)\n\nRemoves an element from the list.\n\nnote: Note\nThis operation leaves elm in an invalid state.\n\nwl_list\n\nParameters\n\nelm: Link of the containing struct to remove from the list\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_output_add_listener","text":"wl_output_add_listener(wl_output_, listener, data)\n\niface_wl_output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_output_destroy","text":"wl_output_destroy(wl_output_)\n\niface_wl_output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_output_get_user_data","text":"wl_output_get_user_data(wl_output_)\n\niface_wl_output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_output_release","text":"wl_output_release(wl_output_)\n\niface_wl_output\n\nUsing this request a client can tell the server that it is not going to use the output object anymore.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_send_done-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_output_send_done","text":"wl_output_send_done(resource_)\n\niface_wl_output\n\nSends an done event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_send_geometry-NTuple{9, Any}","page":"API","title":"Wayland.LibWayland.wl_output_send_geometry","text":"wl_output_send_geometry(resource_, x, y, physical_width, physical_height, subpixel, make, model, transform)\n\niface_wl_output\n\nSends an geometry event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nx: x position within the global compositor space\ny: y position within the global compositor space\nphysical_width: width in millimeters of the output\nphysical_height: height in millimeters of the output\nsubpixel: subpixel orientation of the output\nmake: textual description of the manufacturer\nmodel: textual description of the model\ntransform: transform that maps framebuffer to output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_send_mode-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_output_send_mode","text":"wl_output_send_mode(resource_, flags, width, height, refresh)\n\niface_wl_output\n\nSends an mode event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nflags: bitfield of mode flags\nwidth: width of the mode in hardware units\nheight: height of the mode in hardware units\nrefresh: vertical refresh rate in mHz\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_send_scale-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_output_send_scale","text":"wl_output_send_scale(resource_, factor)\n\niface_wl_output\n\nSends an scale event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nfactor: scaling factor of output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_output_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_output_set_user_data","text":"wl_output_set_user_data(wl_output_, user_data)\n\niface_wl_output\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_add_listener","text":"wl_pointer_add_listener(wl_pointer_, listener, data)\n\niface_wl_pointer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_destroy","text":"wl_pointer_destroy(wl_pointer_)\n\niface_wl_pointer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_get_user_data","text":"wl_pointer_get_user_data(wl_pointer_)\n\niface_wl_pointer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_release","text":"wl_pointer_release(wl_pointer_)\n\niface_wl_pointer\n\nUsing this request a client can tell the server that it is not going to use the pointer object anymore.\n\nThis request destroys the pointer proxy object, so clients must not call wl_pointer_destroy() after using this request.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_axis-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_axis","text":"wl_pointer_send_axis(resource_, time, axis, value)\n\niface_wl_pointer\n\nSends an axis event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ntime: timestamp with millisecond granularity\naxis: axis type\nvalue: length of vector in surface-local coordinate space\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_axis_discrete-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_axis_discrete","text":"wl_pointer_send_axis_discrete(resource_, axis, discrete)\n\niface_wl_pointer\n\nSends an axis_discrete event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\naxis: axis type\ndiscrete: number of steps\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_axis_source-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_axis_source","text":"wl_pointer_send_axis_source(resource_, axis_source)\n\niface_wl_pointer\n\nSends an axis_source event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\naxis_source: source of the axis event\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_axis_stop-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_axis_stop","text":"wl_pointer_send_axis_stop(resource_, time, axis)\n\niface_wl_pointer\n\nSends an axis_stop event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ntime: timestamp with millisecond granularity\naxis: the axis stopped with this event\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_button-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_button","text":"wl_pointer_send_button(resource_, serial, time, button, state)\n\niface_wl_pointer\n\nSends an button event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the button event\ntime: timestamp with millisecond granularity\nbutton: button that produced the event\nstate: physical state of the button\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_enter-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_enter","text":"wl_pointer_send_enter(resource_, serial, surface, surface_x, surface_y)\n\niface_wl_pointer\n\nSends an enter event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the enter event\nsurface: surface entered by the pointer\nsurface_x: surface-local x coordinate\nsurface_y: surface-local y coordinate\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_frame-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_frame","text":"wl_pointer_send_frame(resource_)\n\niface_wl_pointer\n\nSends an frame event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_leave-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_leave","text":"wl_pointer_send_leave(resource_, serial, surface)\n\niface_wl_pointer\n\nSends an leave event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the leave event\nsurface: surface left by the pointer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_send_motion-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_send_motion","text":"wl_pointer_send_motion(resource_, time, surface_x, surface_y)\n\niface_wl_pointer\n\nSends an motion event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ntime: timestamp with millisecond granularity\nsurface_x: surface-local x coordinate\nsurface_y: surface-local y coordinate\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_set_cursor-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_set_cursor","text":"wl_pointer_set_cursor(wl_pointer_, serial, surface, hotspot_x, hotspot_y)\n\niface_wl_pointer\n\nSet the pointer surface, i.e., the surface that contains the pointer image (cursor). This request gives the surface the role of a cursor. If the surface already has another role, it raises a protocol error.\n\nThe cursor actually changes only if the pointer focus for this device is one of the requesting client's surfaces or the surface parameter is the current pointer surface. If there was a previous surface set with this request it is replaced. If surface is NULL, the pointer image is hidden.\n\nThe parameters hotspot_x and hotspot_y define the position of the pointer surface relative to the pointer location. Its top-left corner is always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the coordinates of the pointer location, in surface-local coordinates.\n\nOn surface.attach requests to the pointer surface, hotspot_x and hotspot_y are decremented by the x and y parameters passed to the request. Attach must be confirmed by wl_surface.commit as usual.\n\nThe hotspot can also be updated by passing the currently set pointer surface to this request with new values for hotspot_x and hotspot_y.\n\nThe current and pending input regions of the wl_surface are cleared, and wl_surface.set_input_region is ignored until the wl_surface is no longer used as the cursor. When the use as a cursor ends, the current and pending input regions become undefined, and the wl_surface is unmapped.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_pointer_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_pointer_set_user_data","text":"wl_pointer_set_user_data(wl_pointer_, user_data)\n\niface_wl_pointer\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_region_add-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_region_add","text":"wl_region_add(wl_region_, x, y, width, height)\n\niface_wl_region\n\nAdd the specified rectangle to the region.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_region_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_region_destroy","text":"wl_region_destroy(wl_region_)\n\niface_wl_region\n\nDestroy the region. This will invalidate the object ID.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_region_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_region_get_user_data","text":"wl_region_get_user_data(wl_region_)\n\niface_wl_region\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_region_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_region_set_user_data","text":"wl_region_set_user_data(wl_region_, user_data)\n\niface_wl_region\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_region_subtract-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_region_subtract","text":"wl_region_subtract(wl_region_, x, y, width, height)\n\niface_wl_region\n\nSubtract the specified rectangle from the region.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_registry_add_listener","text":"wl_registry_add_listener(wl_registry_, listener, data)\n\niface_wl_registry\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_bind-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_registry_bind","text":"wl_registry_bind(wl_registry_, name, interface, version)\n\niface_wl_registry\n\nBinds a new, client-created object to the server using the specified name as the identifier.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_registry_destroy","text":"wl_registry_destroy(wl_registry_)\n\niface_wl_registry\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_registry_get_user_data","text":"wl_registry_get_user_data(wl_registry_)\n\niface_wl_registry\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_send_global-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_registry_send_global","text":"wl_registry_send_global(resource_, name, interface, version)\n\niface_wl_registry\n\nSends an global event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nname: numeric name of the global object\ninterface: interface implemented by the object\nversion: interface version\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_send_global_remove-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_registry_send_global_remove","text":"wl_registry_send_global_remove(resource_, name)\n\niface_wl_registry\n\nSends an global_remove event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nname: numeric name of the global object\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_registry_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_registry_set_user_data","text":"wl_registry_set_user_data(wl_registry_, user_data)\n\niface_wl_registry\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_seat_add_listener","text":"wl_seat_add_listener(wl_seat_, listener, data)\n\niface_wl_seat\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_destroy","text":"wl_seat_destroy(wl_seat_)\n\niface_wl_seat\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_get_keyboard-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_get_keyboard","text":"wl_seat_get_keyboard(wl_seat_)\n\niface_wl_seat\n\nThe ID provided will be initialized to the wl_keyboard interface for this seat.\n\nThis request only takes effect if the seat has the keyboard capability, or has had the keyboard capability in the past. It is a protocol violation to issue this request on a seat that has never had the keyboard capability. The missing_capability error will be sent in this case.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_get_pointer-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_get_pointer","text":"wl_seat_get_pointer(wl_seat_)\n\niface_wl_seat\n\nThe ID provided will be initialized to the wl_pointer interface for this seat.\n\nThis request only takes effect if the seat has the pointer capability, or has had the pointer capability in the past. It is a protocol violation to issue this request on a seat that has never had the pointer capability. The missing_capability error will be sent in this case.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_get_touch-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_get_touch","text":"wl_seat_get_touch(wl_seat_)\n\niface_wl_seat\n\nThe ID provided will be initialized to the wl_touch interface for this seat.\n\nThis request only takes effect if the seat has the touch capability, or has had the touch capability in the past. It is a protocol violation to issue this request on a seat that has never had the touch capability. The missing_capability error will be sent in this case.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_get_user_data","text":"wl_seat_get_user_data(wl_seat_)\n\niface_wl_seat\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_seat_release","text":"wl_seat_release(wl_seat_)\n\niface_wl_seat\n\nUsing this request a client can tell the server that it is not going to use the seat object anymore.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_send_capabilities-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_seat_send_capabilities","text":"wl_seat_send_capabilities(resource_, capabilities)\n\niface_wl_seat\n\nSends an capabilities event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ncapabilities: capabilities of the seat\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_send_name-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_seat_send_name","text":"wl_seat_send_name(resource_, name)\n\niface_wl_seat\n\nSends an name event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nname: seat identifier\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_seat_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_seat_set_user_data","text":"wl_seat_set_user_data(wl_seat_, user_data)\n\niface_wl_seat\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_destroy","text":"wl_shell_destroy(wl_shell_)\n\niface_wl_shell\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_get_shell_surface-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_get_shell_surface","text":"wl_shell_get_shell_surface(wl_shell_, surface)\n\niface_wl_shell\n\nCreate a shell surface for an existing surface. This gives the wl_surface the role of a shell surface. If the wl_surface already has another role, it raises a protocol error.\n\nOnly one shell surface can be associated with a given surface.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_get_user_data","text":"wl_shell_get_user_data(wl_shell_)\n\niface_wl_shell\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_set_user_data","text":"wl_shell_set_user_data(wl_shell_, user_data)\n\niface_wl_shell\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_add_listener","text":"wl_shell_surface_add_listener(wl_shell_surface_, listener, data)\n\niface_wl_shell_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_destroy","text":"wl_shell_surface_destroy(wl_shell_surface_)\n\niface_wl_shell_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_get_user_data","text":"wl_shell_surface_get_user_data(wl_shell_surface_)\n\niface_wl_shell_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_move-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_move","text":"wl_shell_surface_move(wl_shell_surface_, seat, serial)\n\niface_wl_shell_surface\n\nStart a pointer-driven move of the surface.\n\nThis request must be used in response to a button press event. The server may ignore move requests depending on the state of the surface (e.g. fullscreen or maximized).\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_pong-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_pong","text":"wl_shell_surface_pong(wl_shell_surface_, serial)\n\niface_wl_shell_surface\n\nA client must respond to a ping event with a pong request or the client may be deemed unresponsive.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_send_configure-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_send_configure","text":"wl_shell_surface_send_configure(resource_, edges, width, height)\n\niface_wl_shell_surface\n\nSends an configure event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nedges: how the surface was resized\nwidth: new width of the surface\nheight: new height of the surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_send_ping-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_send_ping","text":"wl_shell_surface_send_ping(resource_, serial)\n\niface_wl_shell_surface\n\nSends an ping event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the ping\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_send_popup_done-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_send_popup_done","text":"wl_shell_surface_send_popup_done(resource_)\n\niface_wl_shell_surface\n\nSends an popup_done event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_class-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_class","text":"wl_shell_surface_set_class(wl_shell_surface_, class_)\n\niface_wl_shell_surface\n\nSet a class for the surface.\n\nThe surface class identifies the general class of applications to which the surface belongs. A common convention is to use the file name (or the full path if it is a non-standard location) of the application's .desktop file as the class.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_fullscreen-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_fullscreen","text":"wl_shell_surface_set_fullscreen(wl_shell_surface_, method, framerate, output)\n\niface_wl_shell_surface\n\nMap the surface as a fullscreen surface.\n\nIf an output parameter is given then the surface will be made fullscreen on that output. If the client does not specify the output then the compositor will apply its policy - usually choosing the output on which the surface has the biggest surface area.\n\nThe client may specify a method to resolve a size conflict between the output size and the surface size - this is provided through the method parameter.\n\nThe framerate parameter is used only when the method is set to \"driver\", to indicate the preferred framerate. A value of 0 indicates that the client does not care about framerate. The framerate is specified in mHz, that is framerate of 60000 is 60Hz.\n\nA method of \"scale\" or \"driver\" implies a scaling operation of the surface, either via a direct scaling operation or a change of the output mode. This will override any kind of output scaling, so that mapping a surface with a buffer size equal to the mode can fill the screen independent of buffer_scale.\n\nA method of \"fill\" means we don't scale up the buffer, however any output scale is applied. This means that you may run into an edge case where the application maps a buffer with the same size of the output mode but buffer_scale 1 (thus making a surface larger than the output). In this case it is allowed to downscale the results to fit the screen.\n\nThe compositor must reply to this request with a configure event with the dimensions for the output on which the surface will be made fullscreen.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_maximized-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_maximized","text":"wl_shell_surface_set_maximized(wl_shell_surface_, output)\n\niface_wl_shell_surface\n\nMap the surface as a maximized surface.\n\nIf an output parameter is given then the surface will be maximized on that output. If the client does not specify the output then the compositor will apply its policy - usually choosing the output on which the surface has the biggest surface area.\n\nThe compositor will reply with a configure event telling the expected new surface size. The operation is completed on the next buffer attach to this surface.\n\nA maximized surface typically fills the entire output it is bound to, except for desktop elements such as panels. This is the main difference between a maximized shell surface and a fullscreen shell surface.\n\nThe details depend on the compositor implementation.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_popup-NTuple{7, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_popup","text":"wl_shell_surface_set_popup(wl_shell_surface_, seat, serial, parent, x, y, flags)\n\niface_wl_shell_surface\n\nMap the surface as a popup.\n\nA popup surface is a transient surface with an added pointer grab.\n\nAn existing implicit grab will be changed to owner-events mode, and the popup grab will continue after the implicit grab ends (i.e. releasing the mouse button does not cause the popup to be unmapped).\n\nThe popup grab continues until the window is destroyed or a mouse button is pressed in any other client's window. A click in any of the client's surfaces is reported as normal, however, clicks in other clients' surfaces will be discarded and trigger the callback.\n\nThe x and y arguments specify the location of the upper left corner of the surface relative to the upper left corner of the parent surface, in surface-local coordinates.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_title-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_title","text":"wl_shell_surface_set_title(wl_shell_surface_, title)\n\niface_wl_shell_surface\n\nSet a short title for the surface.\n\nThis string may be used to identify the surface in a task bar, window list, or other user interface elements provided by the compositor.\n\nThe string must be encoded in UTF-8.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_toplevel-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_toplevel","text":"wl_shell_surface_set_toplevel(wl_shell_surface_)\n\niface_wl_shell_surface\n\nMap the surface as a toplevel surface.\n\nA toplevel surface is not fullscreen, maximized or transient.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_transient-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_transient","text":"wl_shell_surface_set_transient(wl_shell_surface_, parent, x, y, flags)\n\niface_wl_shell_surface\n\nMap the surface relative to an existing surface.\n\nThe x and y arguments specify the location of the upper left corner of the surface relative to the upper left corner of the parent surface, in surface-local coordinates.\n\nThe flags argument controls details of the transient behaviour.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shell_surface_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shell_surface_set_user_data","text":"wl_shell_surface_set_user_data(wl_shell_surface_, user_data)\n\niface_wl_shell_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_add_listener","text":"wl_shm_add_listener(wl_shm_, listener, data)\n\niface_wl_shm\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_create_pool-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_create_pool","text":"wl_shm_create_pool(wl_shm_, fd, size)\n\niface_wl_shm\n\nCreate a new wl_shm_pool object.\n\nThe pool can be used to create shared memory based buffer objects. The server will mmap size bytes of the passed file descriptor, to use as backing memory for the pool.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shm_destroy","text":"wl_shm_destroy(wl_shm_)\n\niface_wl_shm\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shm_get_user_data","text":"wl_shm_get_user_data(wl_shm_)\n\niface_wl_shm\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_create_buffer-NTuple{6, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_pool_create_buffer","text":"wl_shm_pool_create_buffer(wl_shm_pool_, offset, width, height, stride, format)\n\niface_wl_shm_pool\n\nCreate a wl_buffer object from the pool.\n\nThe buffer is created offset bytes into the pool and has width and height as specified. The stride argument specifies the number of bytes from the beginning of one row to the beginning of the next. The format is the pixel format of the buffer and must be one of those advertised through the wl_shm.format event.\n\nA buffer will keep a reference to the pool it was created from so it is valid to destroy the pool immediately after creating a buffer from it.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shm_pool_destroy","text":"wl_shm_pool_destroy(wl_shm_pool_)\n\niface_wl_shm_pool\n\nDestroy the shared memory pool.\n\nThe mmapped memory will be released when all buffers that have been created from this pool are gone.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_shm_pool_get_user_data","text":"wl_shm_pool_get_user_data(wl_shm_pool_)\n\niface_wl_shm_pool\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_resize-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_pool_resize","text":"wl_shm_pool_resize(wl_shm_pool_, size)\n\niface_wl_shm_pool\n\nThis request will cause the server to remap the backing memory for the pool from the file descriptor passed when the pool was created, but using the new size. This request can only be used to make the pool bigger.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_pool_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_pool_set_user_data","text":"wl_shm_pool_set_user_data(wl_shm_pool_, user_data)\n\niface_wl_shm_pool\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_send_format-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_send_format","text":"wl_shm_send_format(resource_, format)\n\niface_wl_shm\n\nSends an format event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nformat: buffer pixel format\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_shm_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_shm_set_user_data","text":"wl_shm_set_user_data(wl_shm_, user_data)\n\niface_wl_shm\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_signal_add-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_signal_add","text":"wl_signal_add(signal, listener)\n\nAdd the specified listener to this signal.\n\nwl_signal\n\nParameters\n\nsignal: The signal that will emit events to the listener\nlistener: The listener to add\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_signal_emit-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_signal_emit","text":"wl_signal_emit(signal, data)\n\nEmits this signal, notifying all registered listeners.\n\nwl_signal\n\nParameters\n\nsignal: The signal object that will emit the signal\ndata: The data that will be emitted with the signal\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_signal_get-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_signal_get","text":"wl_signal_get(signal, notify)\n\nGets the listener struct for the specified callback.\n\nwl_signal\n\nParameters\n\nsignal: The signal that contains the specified listener\nnotify: The listener that is the target of this search\n\nReturns\n\nthe list item that corresponds to the specified listener, or NULL if none was found\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_signal_init-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_signal_init","text":"wl_signal_init(signal)\n\nInitialize a new wl_signal for use.\n\nwl_signal\n\nParameters\n\nsignal: The signal that will be initialized\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subcompositor_destroy","text":"wl_subcompositor_destroy(wl_subcompositor_)\n\niface_wl_subcompositor\n\nInforms the server that the client will not be using this protocol object anymore. This does not affect any other objects, wl_subsurface objects included.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_get_subsurface-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subcompositor_get_subsurface","text":"wl_subcompositor_get_subsurface(wl_subcompositor_, surface, parent)\n\niface_wl_subcompositor\n\nCreate a sub-surface interface for the given surface, and associate it with the given parent surface. This turns a plain wl_surface into a sub-surface.\n\nThe to-be sub-surface must not already have another role, and it must not have an existing wl_subsurface object. Otherwise a protocol error is raised.\n\nAdding sub-surfaces to a parent is a double-buffered operation on the parent (see wl_surface.commit). The effect of adding a sub-surface becomes visible on the next time the state of the parent surface is applied.\n\nThis request modifies the behaviour of wl_surface.commit request on the sub-surface, see the documentation on wl_subsurface interface.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subcompositor_get_user_data","text":"wl_subcompositor_get_user_data(wl_subcompositor_)\n\niface_wl_subcompositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subcompositor_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subcompositor_set_user_data","text":"wl_subcompositor_set_user_data(wl_subcompositor_, user_data)\n\niface_wl_subcompositor\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_destroy","text":"wl_subsurface_destroy(wl_subsurface_)\n\niface_wl_subsurface\n\nThe sub-surface interface is removed from the wl_surface object that was turned into a sub-surface with a wl_subcompositor.get_subsurface request. The wl_surface's association to the parent is deleted, and the wl_surface loses its role as a sub-surface. The wl_surface is unmapped immediately.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_get_user_data","text":"wl_subsurface_get_user_data(wl_subsurface_)\n\niface_wl_subsurface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_place_above-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_place_above","text":"wl_subsurface_place_above(wl_subsurface_, sibling)\n\niface_wl_subsurface\n\nThis sub-surface is taken from the stack, and put back just above the reference surface, changing the z-order of the sub-surfaces. The reference surface must be one of the sibling surfaces, or the parent surface. Using any other surface, including this sub-surface, will cause a protocol error.\n\nThe z-order is double-buffered. Requests are handled in order and applied immediately to a pending state. The final pending state is copied to the active state the next time the state of the parent surface is applied. When this happens depends on whether the parent surface is in synchronized mode or not. See wl_subsurface.set_sync and wl_subsurface.set_desync for details.\n\nA new sub-surface is initially added as the top-most in the stack of its siblings and parent.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_place_below-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_place_below","text":"wl_subsurface_place_below(wl_subsurface_, sibling)\n\niface_wl_subsurface\n\nThe sub-surface is placed just below the reference surface. See wl_subsurface.place_above.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_set_desync-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_set_desync","text":"wl_subsurface_set_desync(wl_subsurface_)\n\niface_wl_subsurface\n\nChange the commit behaviour of the sub-surface to desynchronized mode, also described as independent or freely running mode.\n\nIn desynchronized mode, wl_surface.commit on a sub-surface will apply the pending state directly, without caching, as happens normally with a wl_surface. Calling wl_surface.commit on the parent surface has no effect on the sub-surface's wl_surface state. This mode allows a sub-surface to be updated on its own.\n\nIf cached state exists when wl_surface.commit is called in desynchronized mode, the pending state is added to the cached state, and applied as a whole. This invalidates the cache.\n\nNote: even if a sub-surface is set to desynchronized, a parent sub-surface may override it to behave as synchronized. For details, see wl_subsurface.\n\nIf a surface's parent surface behaves as desynchronized, then the cached state is applied on set_desync.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_set_position-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_set_position","text":"wl_subsurface_set_position(wl_subsurface_, x, y)\n\niface_wl_subsurface\n\nThis schedules a sub-surface position change. The sub-surface will be moved so that its origin (top left corner pixel) will be at the location x, y of the parent surface coordinate system. The coordinates are not restricted to the parent surface area. Negative values are allowed.\n\nThe scheduled coordinates will take effect whenever the state of the parent surface is applied. When this happens depends on whether the parent surface is in synchronized mode or not. See wl_subsurface.set_sync and wl_subsurface.set_desync for details.\n\nIf more than one set_position request is invoked by the client before the commit of the parent surface, the position of a new request always replaces the scheduled position from any previous request.\n\nThe initial position is 0, 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_set_sync-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_set_sync","text":"wl_subsurface_set_sync(wl_subsurface_)\n\niface_wl_subsurface\n\nChange the commit behaviour of the sub-surface to synchronized mode, also described as the parent dependent mode.\n\nIn synchronized mode, wl_surface.commit on a sub-surface will accumulate the committed state in a cache, but the state will not be applied and hence will not change the compositor output. The cached state is applied to the sub-surface immediately after the parent surface's state is applied. This ensures atomic updates of the parent and all its synchronized sub-surfaces. Applying the cached state will invalidate the cache, so further parent surface commits do not (re-)apply old state.\n\nSee wl_subsurface for the recursive effect of this mode.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_subsurface_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_subsurface_set_user_data","text":"wl_subsurface_set_user_data(wl_subsurface_, user_data)\n\niface_wl_subsurface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_add_listener","text":"wl_surface_add_listener(wl_surface_, listener, data)\n\niface_wl_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_attach-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_attach","text":"wl_surface_attach(wl_surface_, buffer, x, y)\n\niface_wl_surface\n\nSet a buffer as the content of this surface.\n\nThe new size of the surface is calculated based on the buffer size transformed by the inverse buffer_transform and the inverse buffer_scale. This means that at commit time the supplied buffer size must be an integer multiple of the buffer_scale. If that's not the case, an invalid_size error is sent.\n\nThe x and y arguments specify the location of the new pending buffer's upper left corner, relative to the current buffer's upper left corner, in surface-local coordinates. In other words, the x and y, combined with the new surface size define in which directions the surface's size changes.\n\nSurface contents are double-buffered state, see wl_surface.commit.\n\nThe initial surface contents are void; there is no content. wl_surface.attach assigns the given wl_buffer as the pending wl_buffer. wl_surface.commit makes the pending wl_buffer the new surface contents, and the size of the surface becomes the size calculated from the wl_buffer, as described above. After commit, there is no pending buffer until the next attach.\n\nCommitting a pending wl_buffer allows the compositor to read the pixels in the wl_buffer. The compositor may access the pixels at any time after the wl_surface.commit request. When the compositor will not access the pixels anymore, it will send the wl_buffer.release event. Only after receiving wl_buffer.release, the client may reuse the wl_buffer. A wl_buffer that has been attached and then replaced by another attach instead of committed will not receive a release event, and is not used by the compositor.\n\nIf a pending wl_buffer has been committed to more than one wl_surface, the delivery of wl_buffer.release events becomes undefined. A well behaved client should not rely on wl_buffer.release events in this case. Alternatively, a client could create multiple wl_buffer objects from the same backing storage or use wp_linux_buffer_release.\n\nDestroying the wl_buffer after wl_buffer.release does not change the surface contents. However, if the client destroys the wl_buffer before receiving the wl_buffer.release event, the surface contents become undefined immediately.\n\nIf wl_surface.attach is sent with a NULL wl_buffer, the following wl_surface.commit will remove the surface content.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_commit-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_surface_commit","text":"wl_surface_commit(wl_surface_)\n\niface_wl_surface\n\nSurface state (input, opaque, and damage regions, attached buffers, etc.) is double-buffered. Protocol requests modify the pending state, as opposed to the current state in use by the compositor. A commit request atomically applies all pending state, replacing the current state. After commit, the new pending state is as documented for each related request.\n\nOn commit, a pending wl_buffer is applied first, and all other state second. This means that all coordinates in double-buffered state are relative to the new wl_buffer coming into use, except for wl_surface.attach itself. If there is no pending wl_buffer, the coordinates are relative to the current surface contents.\n\nAll requests that need a commit to become effective are documented to affect double-buffered state.\n\nOther interfaces may add further double-buffered surface state.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_damage-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_damage","text":"wl_surface_damage(wl_surface_, x, y, width, height)\n\niface_wl_surface\n\nThis request is used to describe the regions where the pending buffer is different from the current surface contents, and where the surface therefore needs to be repainted. The compositor ignores the parts of the damage that fall outside of the surface.\n\nDamage is double-buffered state, see wl_surface.commit.\n\nThe damage rectangle is specified in surface-local coordinates, where x and y specify the upper left corner of the damage rectangle.\n\nThe initial value for pending damage is empty: no damage. wl_surface.damage adds pending damage: the new pending damage is the union of old pending damage and the given rectangle.\n\nwl_surface.commit assigns pending damage as the current damage, and clears pending damage. The server will clear the current damage as it repaints the surface.\n\nNote! New clients should not use this request. Instead damage can be posted with wl_surface.damage_buffer which uses buffer coordinates instead of surface coordinates.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_damage_buffer-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_damage_buffer","text":"wl_surface_damage_buffer(wl_surface_, x, y, width, height)\n\niface_wl_surface\n\nThis request is used to describe the regions where the pending buffer is different from the current surface contents, and where the surface therefore needs to be repainted. The compositor ignores the parts of the damage that fall outside of the surface.\n\nDamage is double-buffered state, see wl_surface.commit.\n\nThe damage rectangle is specified in buffer coordinates, where x and y specify the upper left corner of the damage rectangle.\n\nThe initial value for pending damage is empty: no damage. wl_surface.damage_buffer adds pending damage: the new pending damage is the union of old pending damage and the given rectangle.\n\nwl_surface.commit assigns pending damage as the current damage, and clears pending damage. The server will clear the current damage as it repaints the surface.\n\nThis request differs from wl_surface.damage in only one way - it takes damage in buffer coordinates instead of surface-local coordinates. While this generally is more intuitive than surface coordinates, it is especially desirable when using wp_viewport or when a drawing library (like EGL) is unaware of buffer scale and buffer transform.\n\nNote: Because buffer transformation changes and damage requests may be interleaved in the protocol stream, it is impossible to determine the actual mapping between surface and buffer damage until wl_surface.commit time. Therefore, compositors wishing to take both kinds of damage into account will have to accumulate damage from the two requests separately and only transform from one to the other after receiving the wl_surface.commit.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_surface_destroy","text":"wl_surface_destroy(wl_surface_)\n\niface_wl_surface\n\nDeletes the surface and invalidates its object ID.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_frame-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_surface_frame","text":"wl_surface_frame(wl_surface_)\n\niface_wl_surface\n\nRequest a notification when it is a good time to start drawing a new frame, by creating a frame callback. This is useful for throttling redrawing operations, and driving animations.\n\nWhen a client is animating on a wl_surface, it can use the 'frame' request to get notified when it is a good time to draw and commit the next frame of animation. If the client commits an update earlier than that, it is likely that some updates will not make it to the display, and the client is wasting resources by drawing too often.\n\nThe frame request will take effect on the next wl_surface.commit. The notification will only be posted for one frame unless requested again. For a wl_surface, the notifications are posted in the order the frame requests were committed.\n\nThe server must send the notifications so that a client will not send excessive updates, while still allowing the highest possible update rate for clients that wait for the reply before drawing again. The server should give some time for the client to draw and commit after sending the frame callback events to let it hit the next output refresh.\n\nA server should avoid signaling the frame callbacks if the surface is not visible in any way, e.g. the surface is off-screen, or completely obscured by other opaque surfaces.\n\nThe object returned by this request will be destroyed by the compositor after the callback is fired and as such the client must not attempt to use it after that point.\n\nThe callback_data passed in the callback is the current time, in milliseconds, with an undefined base.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_surface_get_user_data","text":"wl_surface_get_user_data(wl_surface_)\n\niface_wl_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_send_enter-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_send_enter","text":"wl_surface_send_enter(resource_, output)\n\niface_wl_surface\n\nSends an enter event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\noutput: output entered by the surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_send_leave-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_send_leave","text":"wl_surface_send_leave(resource_, output)\n\niface_wl_surface\n\nSends an leave event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\noutput: output left by the surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_set_buffer_scale-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_set_buffer_scale","text":"wl_surface_set_buffer_scale(wl_surface_, scale)\n\niface_wl_surface\n\nThis request sets an optional scaling factor on how the compositor interprets the contents of the buffer attached to the window.\n\nBuffer scale is double-buffered state, see wl_surface.commit.\n\nA newly created surface has its buffer scale set to 1.\n\nwl_surface.set_buffer_scale changes the pending buffer scale. wl_surface.commit copies the pending buffer scale to the current one. Otherwise, the pending and current values are never changed.\n\nThe purpose of this request is to allow clients to supply higher resolution buffer data for use on high resolution outputs. It is intended that you pick the same buffer scale as the scale of the output that the surface is displayed on. This means the compositor can avoid scaling when rendering the surface on that output.\n\nNote that if the scale is larger than 1, then you have to attach a buffer that is larger (by a factor of scale in each dimension) than the desired surface size.\n\nIf scale is not positive the invalid_scale protocol error is raised.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_set_buffer_transform-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_set_buffer_transform","text":"wl_surface_set_buffer_transform(wl_surface_, transform)\n\niface_wl_surface\n\nThis request sets an optional transformation on how the compositor interprets the contents of the buffer attached to the surface. The accepted values for the transform parameter are the values for wl_output.transform.\n\nBuffer transform is double-buffered state, see wl_surface.commit.\n\nA newly created surface has its buffer transformation set to normal.\n\nwl_surface.set_buffer_transform changes the pending buffer transformation. wl_surface.commit copies the pending buffer transformation to the current one. Otherwise, the pending and current values are never changed.\n\nThe purpose of this request is to allow clients to render content according to the output transform, thus permitting the compositor to use certain optimizations even if the display is rotated. Using hardware overlays and scanning out a client buffer for fullscreen surfaces are examples of such optimizations. Those optimizations are highly dependent on the compositor implementation, so the use of this request should be considered on a case-by-case basis.\n\nNote that if the transform value includes 90 or 270 degree rotation, the width of the buffer will become the surface height and the height of the buffer will become the surface width.\n\nIf transform is not one of the values from the wl_output.transform enum the invalid_transform protocol error is raised.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_set_input_region-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_set_input_region","text":"wl_surface_set_input_region(wl_surface_, region)\n\niface_wl_surface\n\nThis request sets the region of the surface that can receive pointer and touch events.\n\nInput events happening outside of this region will try the next surface in the server surface stack. The compositor ignores the parts of the input region that fall outside of the surface.\n\nThe input region is specified in surface-local coordinates.\n\nInput region is double-buffered state, see wl_surface.commit.\n\nwl_surface.set_input_region changes the pending input region. wl_surface.commit copies the pending region to the current region. Otherwise the pending and current regions are never changed, except cursor and icon surfaces are special cases, see wl_pointer.set_cursor and wl_data_device.start_drag.\n\nThe initial value for an input region is infinite. That means the whole surface will accept input. Setting the pending input region has copy semantics, and the wl_region object can be destroyed immediately. A NULL wl_region causes the input region to be set to infinite.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_set_opaque_region-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_set_opaque_region","text":"wl_surface_set_opaque_region(wl_surface_, region)\n\niface_wl_surface\n\nThis request sets the region of the surface that contains opaque content.\n\nThe opaque region is an optimization hint for the compositor that lets it optimize the redrawing of content behind opaque regions. Setting an opaque region is not required for correct behaviour, but marking transparent content as opaque will result in repaint artifacts.\n\nThe opaque region is specified in surface-local coordinates.\n\nThe compositor ignores the parts of the opaque region that fall outside of the surface.\n\nOpaque region is double-buffered state, see wl_surface.commit.\n\nwl_surface.set_opaque_region changes the pending opaque region. wl_surface.commit copies the pending region to the current region. Otherwise, the pending and current regions are never changed.\n\nThe initial value for an opaque region is empty. Setting the pending opaque region has copy semantics, and the wl_region object can be destroyed immediately. A NULL wl_region causes the pending opaque region to be set to empty.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_surface_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_surface_set_user_data","text":"wl_surface_set_user_data(wl_surface_, user_data)\n\niface_wl_surface\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_add_listener-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_add_listener","text":"wl_touch_add_listener(wl_touch_, listener, data)\n\niface_wl_touch\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_destroy-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_touch_destroy","text":"wl_touch_destroy(wl_touch_)\n\niface_wl_touch\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_get_user_data-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_touch_get_user_data","text":"wl_touch_get_user_data(wl_touch_)\n\niface_wl_touch\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_release-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_touch_release","text":"wl_touch_release(wl_touch_)\n\niface_wl_touch\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_cancel-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_cancel","text":"wl_touch_send_cancel(resource_)\n\niface_wl_touch\n\nSends an cancel event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_down-NTuple{7, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_down","text":"wl_touch_send_down(resource_, serial, time, surface, id, x, y)\n\niface_wl_touch\n\nSends an down event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the touch down event\ntime: timestamp with millisecond granularity\nsurface: surface touched\nid: the unique ID of this touch point\nx: surface-local x coordinate\ny: surface-local y coordinate\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_frame-Tuple{Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_frame","text":"wl_touch_send_frame(resource_)\n\niface_wl_touch\n\nSends an frame event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_motion-NTuple{5, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_motion","text":"wl_touch_send_motion(resource_, time, id, x, y)\n\niface_wl_touch\n\nSends an motion event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\ntime: timestamp with millisecond granularity\nid: the unique ID of this touch point\nx: surface-local x coordinate\ny: surface-local y coordinate\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_orientation-Tuple{Any, Any, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_orientation","text":"wl_touch_send_orientation(resource_, id, orientation)\n\niface_wl_touch\n\nSends an orientation event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nid: the unique ID of this touch point\norientation: angle between major axis and positive surface y-axis in degrees\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_shape-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_shape","text":"wl_touch_send_shape(resource_, id, major, minor)\n\niface_wl_touch\n\nSends an shape event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nid: the unique ID of this touch point\nmajor: length of the major axis in surface-local coordinates\nminor: length of the minor axis in surface-local coordinates\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_send_up-NTuple{4, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_send_up","text":"wl_touch_send_up(resource_, serial, time, id)\n\niface_wl_touch\n\nSends an up event to the client owning the resource.\n\nParameters\n\nresource_: The client's resource\nserial: serial number of the touch up event\ntime: timestamp with millisecond granularity\nid: the unique ID of this touch point\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Wayland.LibWayland.wl_touch_set_user_data-Tuple{Any, Any}","page":"API","title":"Wayland.LibWayland.wl_touch_set_user_data","text":"wl_touch_set_user_data(wl_touch_, user_data)\n\niface_wl_touch\n\n\n\n\n\n","category":"method"},{"location":"#Wayland.jl","page":"Home","title":"Wayland.jl","text":"","category":"section"},{"location":"#Status","page":"Home","title":"Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently in development. The source code and public API may change at any moment. Use at your own risk.","category":"page"},{"location":"#Wrapping-libwayland-vs-reimplementing-the-protocol","page":"Home","title":"Wrapping libwayland vs reimplementing the protocol","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The reason we wrap the C implementation libwayland instead of providing our own implementation of the Wayland protocol is driver compatibility. Unfortunately, in the current state of affairs graphics drivers such as Mesa for OpenGL or other proprietary drivers are likely to rely on linking with libwayland-client and calling it with C pointers, which expect to be ABI-compatible with the C implementation. See for example the Vulkan integration with Wayland which requires struct wl_display *display and struct wl_surface *surface pointers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reimplementing the protocol in Julia with full interoperability would mean requiring data structures compatible with the C ABI, which would defeat the purpose of a pure Julia implementation of the protocol.","category":"page"}]
}
